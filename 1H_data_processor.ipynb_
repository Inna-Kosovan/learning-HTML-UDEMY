{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1B85xDD5OTNKj6B8urulfkTV9gGzyizMm","timestamp":1697645940867}],"mount_file_id":"1doyREHioZBNla6eYlkTOCEClY1Lhpv-D","authorship_tag":"ABX9TyMU0pvf0+Y7dz6OEvGlM02q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Сохранить на Google Диске . Вы можете сохранить файл Python на Google Диске, а затем загружать его оттуда при необходимости.\n","\n","Чтобы сохранить на Google Диск:"],"metadata":{"id":"7s6PJOwmqnxK"}},{"cell_type":"code","source":["%%writefile /content/drive/MyDrive/BINANCE/1H/1h_data_processor.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6SWXR8JvbDq","executionInfo":{"status":"ok","timestamp":1697647538390,"user_tz":-120,"elapsed":340,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"f19d480b-f0a0-4522-885d-f2ca8196e38c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing /content/drive/MyDrive/BINANCE/1H/1h_data_processor.py\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":681},"id":"OL8ZsuE-4s2r","executionInfo":{"status":"ok","timestamp":1697648027133,"user_tz":-120,"elapsed":4424,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"9e2d674f-5712-4bf0-8aea-c38a223d6066"},"outputs":[{"output_type":"stream","name":"stdout","text":["  EVENT_TYPE         EVENT_TIME   SYMBOL    TRADE_ID     PRICE  QUANTITY  \\\n","0      trade  10.10.23 11:37:37  BTCUSDT  3234595905  27565.79   0.00036   \n","1      trade  10.10.23 11:37:37  BTCUSDT  3234595906  27565.80   0.00025   \n","2      trade  10.10.23 11:37:37  BTCUSDT  3234595907  27565.85   0.00049   \n","3      trade  10.10.23 11:37:37  BTCUSDT  3234595908  27565.86   0.00036   \n","4      trade  10.10.23 11:37:37  BTCUSDT  3234595909  27565.88   0.00033   \n","\n","   BUYER_ORDER_ID  SELLER_ORDER_ID         TRADE_TIME IS_BUYER_MARKET_MAKER  \n","0     22680259990      22680258817  10.10.23 11:37:37                     N  \n","1     22680259990      22680258889  10.10.23 11:37:37                     N  \n","2     22680259990      22680259285  10.10.23 11:37:37                     N  \n","3     22680259990      22680258833  10.10.23 11:37:37                     N  \n","4     22680259990      22680258857  10.10.23 11:37:37                     N  \n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"display_data","data":{"text/plain":["        SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  \\\n","0      BTCUSDT  3234595905  0.857830  0.000058     22680259990   \n","1      BTCUSDT  3234595906  0.857931  0.000040     22680259990   \n","2      BTCUSDT  3234595907  0.858432  0.000080     22680259990   \n","3      BTCUSDT  3234595908  0.858532  0.000058     22680259990   \n","4      BTCUSDT  3234595909  0.858733  0.000053     22680259990   \n","...        ...         ...       ...       ...             ...   \n","47986  BTCUSDT  3234643764  0.074494  0.001283     22680777141   \n","47987  BTCUSDT  3234643765  0.074594  0.000260     22680777779   \n","47988  BTCUSDT  3234643766  0.074594  0.000308     22680777781   \n","47989  BTCUSDT  3234643767  0.074594  0.000283     22680777782   \n","47990  BTCUSDT  3234643768  0.074594  0.000342     22680777793   \n","\n","       SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","0          22680258817                      0          11  \n","1          22680258889                      0          11  \n","2          22680259285                      0          11  \n","3          22680258833                      0          11  \n","4          22680258857                      0          11  \n","...                ...                    ...         ...  \n","47986      22680777760                      1          12  \n","47987      22680777210                      0          12  \n","47988      22680777210                      0          12  \n","47989      22680777210                      0          12  \n","47990      22680777210                      0          12  \n","\n","[47991 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-cf2d546e-59c6-4b79-977e-2eb83515dbd5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SYMBOL</th>\n","      <th>TRADE_ID</th>\n","      <th>PRICE</th>\n","      <th>QUANTITY</th>\n","      <th>BUYER_ORDER_ID</th>\n","      <th>SELLER_ORDER_ID</th>\n","      <th>IS_BUYER_MARKET_MAKER</th>\n","      <th>TRADE_HOUR</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BTCUSDT</td>\n","      <td>3234595905</td>\n","      <td>0.857830</td>\n","      <td>0.000058</td>\n","      <td>22680259990</td>\n","      <td>22680258817</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BTCUSDT</td>\n","      <td>3234595906</td>\n","      <td>0.857931</td>\n","      <td>0.000040</td>\n","      <td>22680259990</td>\n","      <td>22680258889</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BTCUSDT</td>\n","      <td>3234595907</td>\n","      <td>0.858432</td>\n","      <td>0.000080</td>\n","      <td>22680259990</td>\n","      <td>22680259285</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BTCUSDT</td>\n","      <td>3234595908</td>\n","      <td>0.858532</td>\n","      <td>0.000058</td>\n","      <td>22680259990</td>\n","      <td>22680258833</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BTCUSDT</td>\n","      <td>3234595909</td>\n","      <td>0.858733</td>\n","      <td>0.000053</td>\n","      <td>22680259990</td>\n","      <td>22680258857</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>47986</th>\n","      <td>BTCUSDT</td>\n","      <td>3234643764</td>\n","      <td>0.074494</td>\n","      <td>0.001283</td>\n","      <td>22680777141</td>\n","      <td>22680777760</td>\n","      <td>1</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>47987</th>\n","      <td>BTCUSDT</td>\n","      <td>3234643765</td>\n","      <td>0.074594</td>\n","      <td>0.000260</td>\n","      <td>22680777779</td>\n","      <td>22680777210</td>\n","      <td>0</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>47988</th>\n","      <td>BTCUSDT</td>\n","      <td>3234643766</td>\n","      <td>0.074594</td>\n","      <td>0.000308</td>\n","      <td>22680777781</td>\n","      <td>22680777210</td>\n","      <td>0</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>47989</th>\n","      <td>BTCUSDT</td>\n","      <td>3234643767</td>\n","      <td>0.074594</td>\n","      <td>0.000283</td>\n","      <td>22680777782</td>\n","      <td>22680777210</td>\n","      <td>0</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>47990</th>\n","      <td>BTCUSDT</td>\n","      <td>3234643768</td>\n","      <td>0.074594</td>\n","      <td>0.000342</td>\n","      <td>22680777793</td>\n","      <td>22680777210</td>\n","      <td>0</td>\n","      <td>12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>47991 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf2d546e-59c6-4b79-977e-2eb83515dbd5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cf2d546e-59c6-4b79-977e-2eb83515dbd5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cf2d546e-59c6-4b79-977e-2eb83515dbd5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c042370e-dbf8-45f3-8871-0d4dd7dd8c90\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c042370e-dbf8-45f3-8871-0d4dd7dd8c90')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c042370e-dbf8-45f3-8871-0d4dd7dd8c90 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{}}],"source":["from sklearn import preprocessing\n","import pandas as pd\n","import logging\n","import matplotlib.pyplot as plt\n","import pickle\n","from google.colab import drive\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO)\n","logger = logging.getLogger(__name__)\n","\n","# Function to load and preprocess data\n","def load_and_preprocess_data(file_path):\n","    try:\n","        if file_path.endswith('.csv'):\n","            df = pd.read_csv(file_path)\n","        else:\n","            logger.error(f\"Unsupported file format: {file_path}\")\n","            return None\n","        return df\n","    except FileNotFoundError:\n","        logger.error(f\"File {file_path} not found.\")\n","        return None\n","\n","def test_load_and_preprocess_data_v1():\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/TABLE_10_10_23_1H.csv'\n","    df = load_and_preprocess_data(file_path)\n","    assert df is not None, f\"Failed to load data from {file_path}\"\n","\n","def test_load_and_preprocess_data_v2():\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/TABLE_10_10_23_1H.csv'\n","    df = load_and_preprocess_data(file_path)\n","    assert df is not None, f\"Failed to load data from {file_path}\"\n","\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/TABLE_10_10_23_1H.csv')\n","print(df.head())  # Print the first few rows of the DataFrame\n","\n","import matplotlib.pyplot as plt\n","import pdb\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/TABLE_10_10_23_1H.csv')\n","#df.hist()\n","plt.show()\n","\n","\n","import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","import os\n","import logging\n","\n","def load_and_preprocess_data(file_path):\n","    # Assuming you have this function defined somewhere earlier\n","    pass\n","\n","class DataProcessor:\n","    def __init__(self, file_path: str, scaler_path: str):\n","        self.file_path = file_path\n","        self.scaler_path = scaler_path\n","        self.df = None\n","        self.logger = self.configure_logging()\n","\n","    @staticmethod\n","    def configure_logging():\n","        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n","        return logging.getLogger(__name__)\n","\n","\n","    def read_data(self):\n","        \"\"\"Reads the data from the file path.\"\"\"\n","        if not os.path.exists(self.file_path):\n","            self.logger.error(f\"File {self.file_path} not found.\")\n","            return\n","\n","        try:\n","            self.df = pd.read_csv(self.file_path)\n","            if 'EVENT_TYPE' in self.df.columns:\n","                self.df.drop(columns=['EVENT_TYPE'], inplace=True)\n","            self.logger.info(f'Successfully read data from {self.file_path}')\n","        except Exception as e:\n","            self.logger.error(f\"Unexpected error while reading data from {self.file_path}: {e}\", exc_info=True)\n","\n","    @staticmethod\n","    def handle_missing_values(df):\n","        \"\"\"Handles missing values in the dataframe.\"\"\"\n","        df.ffill(inplace=True)\n","        return df\n","\n","    @staticmethod\n","    def convert_to_datetime(df, columns):\n","        \"\"\"Converts specified columns to datetime.\"\"\"\n","        for col in columns:\n","            df[col] = pd.to_datetime(df[col])\n","        return df\n","\n","    @staticmethod\n","    def scale_columns(df, columns):\n","        \"\"\"Scales specified columns using MinMaxScaler.\"\"\"\n","        scaler = MinMaxScaler()\n","        df[columns] = scaler.fit_transform(df[columns])\n","        return df, scaler\n","\n","    def preprocess(self):\n","        \"\"\"Preprocesses the dataframe.\"\"\"\n","        if self.df is None:\n","            self.logger.error(\"Dataframe is None in preprocess method.\")\n","            return None, None\n","\n","        required_columns = [\"EVENT_TIME\", \"TRADE_TIME\", \"PRICE\", \"QUANTITY\", \"IS_BUYER_MARKET_MAKER\"]\n","        missing_columns = [col for col in required_columns if col not in self.df.columns]\n","\n","        if missing_columns:\n","            self.logger.warning(f\"Missing required columns in the DataFrame: {missing_columns}\")\n","            for col in missing_columns:\n","                self.df[col] = None\n","\n","        self.df = self.handle_missing_values(self.df)\n","        self.df = self.convert_to_datetime(self.df, [\"EVENT_TIME\", \"TRADE_TIME\"])\n","\n","        self.df['IS_BUYER_MARKET_MAKER'] = self.df['IS_BUYER_MARKET_MAKER'].map({'Y': 1, 'N': 0}, na_action='ignore')\n","        self.df['TRADE_HOUR'] = self.df['TRADE_TIME'].dt.hour\n","\n","        self.df, scaler = self.scale_columns(self.df, [\"PRICE\", \"QUANTITY\"])\n","\n","        self.df.drop(columns=[\"EVENT_TIME\", \"TRADE_TIME\"], inplace=True)\n","\n","        return scaler\n","\n","    def save_scaler(self, scaler):\n","        \"\"\"Saves the scaler object to a file.\"\"\"\n","        directory = os.path.dirname(self.scaler_path)\n","        if not os.path.exists(directory):\n","            os.makedirs(directory)\n","\n","        try:\n","            with open(self.scaler_path, 'wb') as f:\n","                pickle.dump(scaler, f)\n","            self.logger.info(f\"Scaler saved to {self.scaler_path}\")\n","        except Exception as e:\n","            self.logger.error(f\"Error saving scaler: {e}\", exc_info=True)\n","\n","    def process(self):\n","        \"\"\"Main processing method.\"\"\"\n","        self.read_data()\n","        scaler = self.preprocess()\n","        if scaler:\n","            self.save_scaler(scaler)\n","        self.show_dataframe()\n","        self.save_dataframe()  # Add this line to save the DataFrame\n","        return self.df\n","\n","    def show_dataframe(self):\n","        \"\"\"Displays the dataframe.\"\"\"\n","        if self.df is not None:\n","            display(self.df)\n","        else:\n","            self.logger.error(\"Dataframe is not available or hasn't been processed yet.\")\n","    def save_dataframe(self):\n","        try:\n","            self.df.to_csv(\"/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv\", index=False)\n","            self.logger.info(f\"Dataframe saved to /content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv\")\n","        except Exception as e:\n","            self.logger.error(f\"Error saving dataframe: {e}\", exc_info=True)\n","\n","\n","# Main execution\n","if __name__ == '__main__':\n","    # Mount Google Drive\n","    drive.mount('/content/drive')\n","\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/TABLE_10_10_23_1H.csv'\n","    scaler_path = '/content/drive/MyDrive/BINANCE/1H/scaler.pkl'\n","\n","    processor = DataProcessor(file_path, scaler_path)\n","    processed_df = processor.process()"]},{"cell_type":"markdown","source":["Check if the file exists: The first block of code uses os.path.exists() to check if the file at the provided file_path exists. If it does,                                     it prints         **\"The file exists.\"** Otherwise, it prints **\"The file does not exist.**\"\n","Проверить, существует ли файл : первый блок кода используется os.path.exists()для проверки существования указанного файла file_path. Если это так, он печатает «Файл существует». В противном случае он печатает «Файл не существует»."],"metadata":{"id":"9VQI8KGkszR_"}},{"cell_type":"code","source":["import os\n","if os.path.exists(file_path):\n","    print(\"The file exists.\")\n","else:\n","    print(\"The file does not exist.\")\n","\n","\n","file_path = '/content/drive/MyDrive/BINANCE/1H/1h_data_processor.py'\n","\n","# Check the size of the file\n","file_size = os.path.getsize(file_path)\n","print(f\"File size: {file_size} bytes\")\n","\n","# If file size is not zero, read and print its content\n","if file_size != 0:\n","    with open(file_path, 'r') as file:\n","        content = file.read()\n","        print(content)\n","else:\n","    print(\"The file is empty.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ca1pUV_5jIon","executionInfo":{"status":"ok","timestamp":1697648063963,"user_tz":-120,"elapsed":531,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"eb726cdd-395e-4ac3-84ad-d5413dbd94b3"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["The file exists.\n","File size: 1 bytes\n"," \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"8o1tmr-IjIcl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"wxv4w-D2jITQ"},"execution_count":null,"outputs":[]}]}