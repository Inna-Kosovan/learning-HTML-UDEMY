{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"RguaZI424vqN"},"outputs":[],"source":["#!git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","#!python rapidsai-csp-utils/colab/pip-install.py"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":983,"status":"ok","timestamp":1697805373621,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"j6jHSKzawpVq","outputId":"9611fb74-e001-445f-bd47-abf1496579c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting /content/drive/MyDrive/BINANCE/1H/Technical_indicators_1h.py\n"]}],"source":["%%writefile /content/drive/MyDrive/BINANCE/1H/Technical_indicators_1h.py\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"F5-BXx_k4Re6"},"outputs":[],"source":["!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz\n","!tar -xzvf ta-lib-0.4.0-src.tar.gz\n","%cd ta-lib\n","!./configure --prefix=/usr\n","!make\n","!sudo make install\n","!apt-get update\n","!apt-get install libta-lib-dev\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qQzCNGMfXt8T"},"outputs":[],"source":["!pip install TA-Lib\n","!pip install ta\n","!pip install pyproject.toml\n","!pip install pandas scikit-learn tensorflow\n","!pip install matplotlib\n","!pip install tensorflow-gpu pandas sklearn\n","!pip install scikit-learn"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8NKJ2cOZD5WF"},"outputs":[],"source":["!pip list\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MhufUE6G414y","executionInfo":{"status":"ok","timestamp":1697987018851,"user_tz":-120,"elapsed":20824,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"6a09a19f-439a-452d-f726-52b86d015ab3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_SPfRFdk2uGy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697987057331,"user_tz":-120,"elapsed":6486,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"c08129c0-0582-461d-b22a-ac53744e3e44"},"outputs":[{"output_type":"stream","name":"stdout","text":["/job:localhost/replica:0/task:0/device:GPU:0\n","TensorFlow version: 2.13.0\n","GPU Available: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n"]}],"source":["import tensorflow as tf\n","# ОБОВЯЗКОВО АКТИВУВАТИ\n","# Specify the device for computation\n","with tf.device('/GPU:0'):\n","    # Your TensorFlow operations here\n","    a = tf.constant([1.0, 2.0, 3.0], shape=[3], name='a')\n","    b = tf.constant([1.0, 2.0, 3.0], shape=[3], name='b')\n","    c = tf.add(a, b)\n","\n","# Check the device for the resultant tensor\n","print(c.device)\n","import tensorflow as tf\n","\n","# Check TensorFlow version and GPU availability\n","print(f'TensorFlow version: {tf.__version__}')\n","print(f'GPU Available: {tf.config.list_physical_devices(\"GPU\")}')\n","\n"]},{"cell_type":"code","source":[],"metadata":{"id":"HJZFNgTkJWIS"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YwCCPeU693DN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697987062806,"user_tz":-120,"elapsed":4733,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"1a7fce58-b9cb-4fa0-8927-9ae740023c33"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gputil\n","  Downloading GPUtil-1.4.0.tar.gz (5.5 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: gputil\n","  Building wheel for gputil (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gputil: filename=GPUtil-1.4.0-py3-none-any.whl size=7392 sha256=59c28110a735e6f2a1e801ba40612dd3cc3e4fb4ff4cff289a2bec22279ee22a\n","  Stored in directory: /root/.cache/pip/wheels/a9/8a/bd/81082387151853ab8b6b3ef33426e98f5cbfebc3c397a9d4d0\n","Successfully built gputil\n","Installing collected packages: gputil\n","Successfully installed gputil-1.4.0\n","GPU ID: 0\n","GPU Name: Tesla T4\n","GPU Memory Free: 14740.0MB\n","GPU Memory Used: 361.0MB\n","GPU Memory Total: 15360.0MB\n","------\n","Num GPUs Available:  1\n"]}],"source":["!pip install gputil\n","import GPUtil\n","\n","# Get the list of available GPU devices\n","gpus = GPUtil.getGPUs()\n","\n","# Print detailed GPU information\n","for gpu in gpus:\n","    print(f\"GPU ID: {gpu.id}\")\n","    print(f\"GPU Name: {gpu.name}\")\n","    # print(f\"GPU Driver Version: {gpu.driverVersion}\")  # Remove or comment out this line\n","    print(f\"GPU Memory Free: {gpu.memoryFree}MB\")\n","    print(f\"GPU Memory Used: {gpu.memoryUsed}MB\")\n","    print(f\"GPU Memory Total: {gpu.memoryTotal}MB\")\n","    print(\"------\")\n","import tensorflow as tf\n","print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TcfM-OMa2uRH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697987068708,"user_tz":-120,"elapsed":305,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"ddd41197-f50f-4486-c4fc-17c62b128146"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sun Oct 22 15:04:28 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 525.105.17   Driver Version: 525.105.17   CUDA Version: 12.0     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   39C    P0    26W /  70W |    361MiB / 15360MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","!python '/content/drive/MyDrive/BINANCE/1D/install_script.py'\n"],"metadata":{"id":"5BpgX4YQFE8F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install tensorflow\n"],"metadata":{"id":"M6o8nDD8FE49","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697987115825,"user_tz":-120,"elapsed":4007,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"adb635d2-bbe3-47db-bc84-463473027e70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.13.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.1.21 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.5.26)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.59.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: keras<2.14,>=2.13.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.13.1)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (16.0.6)\n","Requirement already satisfied: numpy<=1.24.3,>=1.22 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.23.5)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.2)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: tensorboard<2.14,>=2.13 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.13.0)\n","Requirement already satisfied: tensorflow-estimator<2.14,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.13.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.3.0)\n","Requirement already satisfied: typing-extensions<4.6.0,>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.5.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.34.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.41.2)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.14,>=2.13->tensorflow) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.14,>=2.13->tensorflow) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.14,>=2.13->tensorflow) (3.5)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.14,>=2.13->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.14,>=2.13->tensorflow) (0.7.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.14,>=2.13->tensorflow) (3.0.0)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.14,>=2.13->tensorflow) (5.3.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.14,>=2.13->tensorflow) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.14,>=2.13->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.14,>=2.13->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.14,>=2.13->tensorflow) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.14,>=2.13->tensorflow) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.14,>=2.13->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.14,>=2.13->tensorflow) (2023.7.22)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.14,>=2.13->tensorflow) (2.1.3)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.14,>=2.13->tensorflow) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.14,>=2.13->tensorflow) (3.2.2)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"whkYE3k7FE11"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import time\n","import logging\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import DBSCAN\n","import warnings\n","from sklearn.model_selection import train_test_split\n","from sklearn.exceptions import DataConversionWarning\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from sklearn.impute import SimpleImputer\n","\n","\n","\n","\n","# Ensure TensorFlow uses GPU\n","if not tf.config.experimental.list_physical_devices('GPU'):\n","    raise ValueError(\"No GPU found. Ensure you have the GPU version of TensorFlow installed.\")\n","\n","# Suppress DataConversionWarning\n","warnings.filterwarnings(action='ignore', category=DataConversionWarning)\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[logging.FileHandler(\"error.log\"), logging.StreamHandler()])\n","logger = logging.getLogger('DataProcessingLogger')\n","\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        return df\n","    except Exception as e:\n","        logger.error(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","# Load data\n","file_path = '/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv'\n","df = load_and_preprocess_data(file_path)\n","\n","df.drop(['SYMBOL'], axis=1, inplace=True)\n","\n","\n","start_time = time.time()\n","\n","# Suppress DataConversionWarning\n","warnings.filterwarnings(action='ignore', category=DataConversionWarning)\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[logging.FileHandler(\"error.log\"), logging.StreamHandler()])\n","logger = logging.getLogger('DataProcessingLogger')\n","\n","def load_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        return df\n","    except Exception as e:\n","        logger.error(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","# Load data\n","file_path = '/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv'\n","\n","df = load_data(file_path)\n","df.drop(['SYMBOL'], axis=1, inplace=True)\n","\n","# Anomaly Detection using DBSCAN\n","feature_cols = ['PRICE', 'QUANTITY', 'SELLER_ORDER_ID', 'BUYER_ORDER_ID']\n","dbscan = DBSCAN(eps=0.5, min_samples=5)\n","df['DBSCAN_Anomaly'] = dbscan.fit_predict(df[feature_cols])\n","\n","# Splitting the data\n","X = df.drop(columns=['DBSCAN_Anomaly'])\n","y = df['DBSCAN_Anomaly']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Splitting the data\n","X = df.drop(columns=['DBSCAN_Anomaly'])\n","y = df['DBSCAN_Anomaly']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n","print(time.time())\n","print(time.time())\n","\n","\n","print(df)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KcPVIwk66Z7Y","executionInfo":{"status":"ok","timestamp":1697987131611,"user_tz":-120,"elapsed":2161,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"f03436bd-e466-4eaa-9ef4-55097ffe27ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Time taken: 0 minutes and 0.334314 seconds.\n","1697987131.251453\n","1697987131.251536\n","         TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0      3234595905  0.857830  0.000058     22680259990      22680258817   \n","1      3234595906  0.857931  0.000040     22680259990      22680258889   \n","2      3234595907  0.858432  0.000080     22680259990      22680259285   \n","3      3234595908  0.858532  0.000058     22680259990      22680258833   \n","4      3234595909  0.858733  0.000053     22680259990      22680258857   \n","...           ...       ...       ...             ...              ...   \n","47986  3234643764  0.074494  0.001283     22680777141      22680777760   \n","47987  3234643765  0.074594  0.000260     22680777779      22680777210   \n","47988  3234643766  0.074594  0.000308     22680777781      22680777210   \n","47989  3234643767  0.074594  0.000283     22680777782      22680777210   \n","47990  3234643768  0.074594  0.000342     22680777793      22680777210   \n","\n","       IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  \n","0                          0          11              -1  \n","1                          0          11              -1  \n","2                          0          11              -1  \n","3                          0          11              -1  \n","4                          0          11              -1  \n","...                      ...         ...             ...  \n","47986                      1          12              -1  \n","47987                      0          12              -1  \n","47988                      0          12              -1  \n","47989                      0          12              -1  \n","47990                      0          12              -1  \n","\n","[47991 rows x 8 columns]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"15Gks31kp2pm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# This is in a subsequent cell\n","print(df.head())\n","# Access the DataFrame 'df' and perform operations on it\n","print(df.describe())  # Prints statistical summary of the DataFrame\n","\n","\n","start_time = time.time()\n","\n","# Ensure TensorFlow uses GPU\n","if not tf.config.experimental.list_physical_devices('GPU'):\n","    raise ValueError(\"No GPU found. Ensure you have the GPU version of TensorFlow installed.\")\n","\n","# Suppress DataConversionWarning\n","warnings.filterwarnings(action='ignore', category=DataConversionWarning)\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[logging.FileHandler(\"error.log\"), logging.StreamHandler()])\n","logger = logging.getLogger('DataProcessingLogger')\n","\n","\n","# Splitting the data\n","X = df.drop(columns=['DBSCAN_Anomaly'])\n","y = df['DBSCAN_Anomaly']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Impute missing values\n","imputer = SimpleImputer(strategy='mean')\n","X_train = imputer.fit_transform(X_train)\n","X_test = imputer.transform(X_test)\n","\n","# Data normalization\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","\n","# Impute missing values\n","imputer = SimpleImputer(strategy='mean')\n","X_train = imputer.fit_transform(X_train)\n","X_test = imputer.transform(X_test)\n","\n","# Data normalization\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","# GridSearchCV and model training\n","param_grid = {\n","    'n_estimators': [10, 50, 150, 200],\n","    'learning_rate': [0.01, 0.1, 0.2],\n","    'max_depth': [3]\n","}\n","best_model = GradientBoostingRegressor(random_state=42)\n","grid_search = GridSearchCV(best_model, param_grid, cv=15)\n","grid_search.fit(X_train, y_train)\n","\n","# Prediction and Metrics\n","y_pred = grid_search.predict(X_test)\n","mae = mean_absolute_error(y_test, y_pred)\n","rmse = mean_squared_error(y_test, y_pred, squared=False)\n","print(f'Mean Absolute Error: {mae}')\n","print(f'Root Mean Squared Error: {rmse}')\n","logger.info(f\"Computing technical indicators took {end_time - start_time} seconds\")\n","\n","# Creating the comparison DataFrame\n","comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n","print(comparison_df.head())\n","\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n","print(time.time())\n","print(time.time())"],"metadata":{"id":"yJzTOqPp9BFg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697836254748,"user_tz":-120,"elapsed":922740,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"4e4b4148-ac4f-4a9a-8e00-69c148a44bd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0  3234595905  0.857830  0.000058     22680259990      22680258817   \n","1  3234595906  0.857931  0.000040     22680259990      22680258889   \n","2  3234595907  0.858432  0.000080     22680259990      22680259285   \n","3  3234595908  0.858532  0.000058     22680259990      22680258833   \n","4  3234595909  0.858733  0.000053     22680259990      22680258857   \n","\n","   IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  \n","0                      0          11              -1  \n","1                      0          11              -1  \n","2                      0          11              -1  \n","3                      0          11              -1  \n","4                      0          11              -1  \n","           TRADE_ID         PRICE      QUANTITY  BUYER_ORDER_ID  \\\n","count  4.799100e+04  47991.000000  47991.000000    4.799100e+04   \n","mean   3.234620e+09      0.442916      0.003938    2.268038e+10   \n","std    1.385395e+04      0.238370      0.017727    8.088109e+05   \n","min    3.234596e+09      0.000000      0.000000    2.267157e+10   \n","25%    3.234608e+09      0.287046      0.000053    2.268037e+10   \n","50%    3.234620e+09      0.378183      0.000127    2.268051e+10   \n","75%    3.234632e+09      0.535492      0.000936    2.268064e+10   \n","max    3.234644e+09      1.000000      1.000000    2.268078e+10   \n","\n","       SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER    TRADE_HOUR  DBSCAN_Anomaly  \n","count     4.799100e+04           47991.000000  47991.000000    47991.000000  \n","mean      2.268051e+10               0.518993     11.603321       -0.976246  \n","std       2.056203e+05               0.499644      0.489213        0.517196  \n","min       2.267266e+10               0.000000     11.000000       -1.000000  \n","25%       2.268038e+10               0.000000     11.000000       -1.000000  \n","50%       2.268051e+10               1.000000     12.000000       -1.000000  \n","75%       2.268064e+10               1.000000     12.000000       -1.000000  \n","max       2.268078e+10               1.000000     12.000000       16.000000  \n","Mean Absolute Error: 0.01321229350163988\n","Root Mean Squared Error: 0.22098871590944635\n","       Actual  Predicted\n","38541      -1  -0.995981\n","15296      -1  -0.998595\n","14513      -1  -0.997954\n","25652      -1  -0.999828\n","13240      -1  -1.002142\n","Time taken: 15 minutes and 21.822423 seconds.\n","1697836253.67877\n","1697836253.6788304\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MJpB1nChOseM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837005246,"user_tz":-120,"elapsed":3356,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"03451e81-3ef5-4d58-ee28-401fec4260f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["           TRADE_ID         PRICE      QUANTITY  BUYER_ORDER_ID  \\\n","count  4.799100e+04  47991.000000  47991.000000    4.799100e+04   \n","mean   3.234620e+09      0.442916      0.003938    2.268038e+10   \n","std    1.385395e+04      0.238370      0.017727    8.088109e+05   \n","min    3.234596e+09      0.000000      0.000000    2.267157e+10   \n","25%    3.234608e+09      0.287046      0.000053    2.268037e+10   \n","50%    3.234620e+09      0.378183      0.000127    2.268051e+10   \n","75%    3.234632e+09      0.535492      0.000936    2.268064e+10   \n","max    3.234644e+09      1.000000      1.000000    2.268078e+10   \n","\n","       SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER    TRADE_HOUR  DBSCAN_Anomaly  \n","count     4.799100e+04           47991.000000  47991.000000    47991.000000  \n","mean      2.268051e+10               0.518993     11.603321       -0.976246  \n","std       2.056203e+05               0.499644      0.489213        0.517196  \n","min       2.267266e+10               0.000000     11.000000       -1.000000  \n","25%       2.268038e+10               0.000000     11.000000       -1.000000  \n","50%       2.268051e+10               1.000000     12.000000       -1.000000  \n","75%       2.268064e+10               1.000000     12.000000       -1.000000  \n","max       2.268078e+10               1.000000     12.000000       16.000000  \n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["\n","# Access the DataFrame 'df' and perform operations on it\n","print(df.describe())  # Prints statistical summary of the DataFrame\n","\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","path = \"/content/drive/MyDrive/BINANCE/1H/my_dataframe.csv\"  # Change 'my_dataframe.csv' to your preferred file name\n","df.to_csv(path, index=False)  # 'index=False' ensures that the row indices are not saved to the CSV\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PtKBjPfDOsbh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837182669,"user_tz":-120,"elapsed":2881,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"d3543d80-b9f7-4771-bd9e-17e24759fcfc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Dngc33EAOsZY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837192957,"user_tz":-120,"elapsed":624,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"7f2356ae-907f-4d20-8724-35ab2861a46d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Results saved to: /content/drive/MyDrive/BINANCE/1H/comparison_results.csv\n"]}],"source":["\n","\n","# Save the comparison_df to Google Drive\n","comparison_df_path = \"/content/drive/MyDrive/BINANCE/1H/comparison_results.csv\"\n","comparison_df.to_csv(comparison_df_path, index=False)\n","print(f\"Results saved to: {comparison_df_path}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YBvBEatBOsSb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837374876,"user_tz":-120,"elapsed":4659,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"a03c29f2-52a6-489b-f8fc-fe7fd88c2d42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SufovZ_vOsMj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837377590,"user_tz":-120,"elapsed":8,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"095e529e-4e8b-470d-bb64-fc390175978c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Results saved to: /content/drive/MyDrive/BINANCE/1H/prediction_results.csv\n"]}],"source":["# Prediction and Metrics\n","y_pred = grid_search.predict(X_test)\n","mae = mean_absolute_error(y_test, y_pred)\n","rmse = mean_squared_error(y_test, y_pred, squared=False)\n","\n","# Create DataFrame from results\n","results_df = pd.DataFrame({\n","    'Actual': y_test,\n","    'Predicted': y_pred\n","})\n","results_df['MAE'] = mae\n","results_df['RMSE'] = rmse\n","\n","# Save the results DataFrame to Google Drive\n","results_path = \"/content/drive/MyDrive/BINANCE/1H/prediction_results.csv\"\n","results_df.to_csv(results_path, index=False)\n","print(f\"Results saved to: {results_path}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qaTc8rc4OsIt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SAy64XUROq_a"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aWEeMAaJOq8I"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8VqN5AeBOq4w"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoKOdutErv8J"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1dEfY824rv2G"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"efJM3yB-rvzI"},"outputs":[],"source":[]},{"cell_type":"code","source":[],"metadata":{"id":"OAJcC5Qhnfvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"AO2JA46enfsf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XiwZqWS0nfps"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"u66ZDmvvnfmm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UkI3ASPAnfkU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Tgh_p0ObnfhI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"STfWCiDynfdz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"032aadXInfac"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"STf0DC0OnfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KVhK2mOMnfTs"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B0HH1PCarvv2"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V_G_AnEJrvtD"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36363,"status":"ok","timestamp":1697738250519,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"zZtAsLIsrwiB","outputId":"24af1662-38be-4c15-f424-2cfe96453bfb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","    SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0  BTCUSDT  3234595905  0.857830  0.000058     22680259990      22680258817   \n","1  BTCUSDT  3234595906  0.857931  0.000040     22680259990      22680258889   \n","2  BTCUSDT  3234595907  0.858432  0.000080     22680259990      22680259285   \n","3  BTCUSDT  3234595908  0.858532  0.000058     22680259990      22680258833   \n","4  BTCUSDT  3234595909  0.858733  0.000053     22680259990      22680258857   \n","\n","   IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","0                      0          11  \n","1                      0          11  \n","2                      0          11  \n","3                      0          11  \n","4                      0          11  \n","[W] [17:57:25.828843] Batch size limited by the chosen integer type (4 bytes). 47991 -> 44747. Using the larger integer type might result in better performance\n"]},{"name":"stderr","output_type":"stream","text":["ERROR:__main__:Error detecting anomalies using LOF. Exception: module cuml has no attribute LocalOutlierFactor\n"]},{"name":"stdout","output_type":"stream","text":["Anomalies detected using DBSCAN: 65\n","       SYMBOL    TRADE_ID     PRICE   QUANTITY  BUYER_ORDER_ID  \\\n","78    BTCUSDT  3234595848  1.679659  10.884503     22680259779   \n","1176  BTCUSDT  3234596954  1.985024   6.597394     22680270915   \n","1191  BTCUSDT  3234596969  2.001848  11.900645     22680270923   \n","2667  BTCUSDT  3234598445  2.326141   6.469812     22680285809   \n","2739  BTCUSDT  3234598517  2.326141   6.463795     22680285809   \n","\n","      SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  \n","78        22680259707                      0          11              -1  \n","1176      22680270864                      0          11              -1  \n","1191      22680264396                      0          11              -1  \n","2667      22680285616                      0          11              -1  \n","2739      22680286560                      1          11              -1  \n"]}],"source":["import os\n","\n","import logging\n","import matplotlib.pyplot as plt\n","import time\n","from sklearn.neighbors import LocalOutlierFactor\n","\n","from google.colab import drive  # <-- Add this import\n","\n","# Load data\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","print(df.head())  # Print the first few rows of the DataFrame\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[logging.FileHandler(\"error.log\"), logging.StreamHandler()])\n","logger = logging.getLogger(__name__)\n","\n","def read_csv_from_drive(file_path):\n","    \"\"\"Function to read CSV from Google Drive.\"\"\"\n","    try:\n","        return cudf.read_csv(file_path)\n","    except Exception as e:\n","        logger.error(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","def get_signals(df):\n","    \"\"\"Function to detect anomalies, compute technical indicators, and add them to the dataframe.\"\"\"\n","    if 'PRICE' not in df.columns or 'QUANTITY' not in df.columns:\n","        logger.error(\"PRICE or QUANTITY column is missing in the dataframe.\")\n","        return\n","\n","    feature_cols = ['PRICE', 'QUANTITY']\n","\n","    # Normalize the data\n","    try:\n","        start_time = time.time()\n","        scaler = cuml.preprocessing.StandardScaler()\n","        df[feature_cols] = scaler.fit_transform(df[feature_cols])\n","        end_time = time.time()\n","        logger.info(f\"Normalizing data took {end_time - start_time} seconds\")\n","    except Exception as e:\n","        logger.error(f\"Error normalizing data. Exception: {e}\")\n","        return\n","\n","    # Anomaly Detection using DBSCAN\n","    try:\n","        start_time = time.time()\n","        # Anomaly Detection using DBSCAN\n","        dbscan = cuml.DBSCAN(eps=0.5, min_samples=5)\n","        df['DBSCAN_Anomaly'] = dbscan.fit_predict(df[feature_cols])\n","\n","        anomalies_dbscan = df[df['DBSCAN_Anomaly'] == -1]\n","        end_time = time.time()\n","        logger.info(f\"DBSCAN took {end_time - start_time} seconds\")\n","        print(f'Anomalies detected using DBSCAN: {len(anomalies_dbscan)}')\n","        print(anomalies_dbscan.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using DBSCAN. Exception: {e}\")\n","\n","# Anomaly Detection using DBSCAN\n","    try:\n","        start_time = time.time()\n","        # Anomaly Detection using DBSCAN\n","        dbscan = cuml.DBSCAN(eps=0.5, min_samples=5)\n","        df['DBSCAN_Anomaly'] = dbscan.fit_predict(df[feature_cols])\n","\n","        anomalies_dbscan = df[df['DBSCAN_Anomaly'] == -1]\n","        end_time = time.time()\n","        logger.info(f\"DBSCAN took {end_time - start_time} seconds\")\n","        print(f'Anomalies detected using DBSCAN: {len(anomalies_dbscan)}')\n","        print(anomalies_dbscan.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using DBSCAN. Exception: {e}\")\n","\n","    # Technical Indicators using `ta` library\n","    try:\n","        start_time = time.time()\n","        window_size = 100\n","        df['SMA1'] = df['PRICE'].rolling(window=1).mean()\n","        df['SMA100'] = df['PRICE'].rolling(window=window_size).mean()\n","        # Custom GPU RSI Calculation (Simplified)\n","        delta = df['PRICE'].diff().fillna(0)\n","        gain = (delta.where(delta > 0, 0))\n","        loss = (-delta.where(delta < 0, 0))\n","        avg_gain = gain.rolling(window=window_size).mean()\n","        avg_loss = loss.rolling(window=window_size).mean()\n","        rs = avg_gain / avg_loss\n","        df['RSI'] = 100 - (100 / (1 + rs))\n","        # Other technical indicators can also be implemented in a similar GPU-accelerated manner\n","        end_time = time.time()\n","        logger.info(f\"Computing technical indicators took {end_time - start_time} seconds\")\n","    except Exception as e:\n","        logger.error(f\"Error computing technical indicators. Exception: {e}\")\n","\n","     # Save to CSV\n","    try:\n","        path = \"/content/drive/MyDrive/BINANCE/1H/Technical_indicators_simplified_1h.csv\"\n","        df.to_csv(path)\n","        logger.info(f\"Data saved successfully to {path}\")\n","    except Exception as e:\n","        logger.error(f\"Error saving data to {path}. Exception: {e}\")\n","\n","# Assuming Google Drive is already mounted\n","df = read_csv_from_drive('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","\n","# Check if the dataframe is not empty before proceeding\n","if df is not None and not df.empty:\n","    get_signals(df)\n","else:\n","    logger.error(\"DataFrame is empty or None.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xmHzh8NbrvqJ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qZGDTORVrvmx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J9CobtAFrvkF"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KSFwX7TFrvgn"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wwITCLU0rvdq"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rduB2qAurvah"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":18186,"status":"ok","timestamp":1697651713711,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"1PKwXQtzHmEf","outputId":"7205631f-f7dc-4777-b21f-f15107a2f192"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","    SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0  BTCUSDT  3234595905  0.857830  0.000058     22680259990      22680258817   \n","1  BTCUSDT  3234595906  0.857931  0.000040     22680259990      22680258889   \n","2  BTCUSDT  3234595907  0.858432  0.000080     22680259990      22680259285   \n","3  BTCUSDT  3234595908  0.858532  0.000058     22680259990      22680258833   \n","4  BTCUSDT  3234595909  0.858733  0.000053     22680259990      22680258857   \n","\n","   IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","0                      0          11  \n","1                      0          11  \n","2                      0          11  \n","3                      0          11  \n","4                      0          11  \n"]},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAmQAAAGzCAYAAACBwgu2AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACKmElEQVR4nO3deVxU1f8/8NcwbCIOq4AoArmv4IpYKSZCipap5ZKKS5oGKlJuX01cKtyXlLQywTW31D6KG+GWiloopbiUiVsKqKiIyCKc3x/+5sYwAzIIXpbX8/GYxwPOPXPvOeeee+d9z90UQggBIiIiIpKNgdwFICIiIqrsGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwB2SukUCiK9Dl8+DCuXbumkWZgYABra2t07doVMTExBS7j4sWLUCgUMDU1xcOHD3Xm8fLy0pivSqVCgwYNMGjQIERFRen8jouLS4Hlffvtt4vcBup6LViwQEo7fPiwxvxMTExgb28PLy8vfPXVV7h7926R50/lT0REhMb6NzU1Rf369REYGIikpCQA2n1EqVTCzs4Offr0wcWLF7XmOWTIEJibm+tc3o4dO9C1a1fY2trC2NgYjo6O+OCDD3Dw4EEpT/7l5f9s2rSpdBqDZBUfH4+BAweiZs2aMDExgaOjIwYOHIgLFy5o5JsxYwYUCgXu3buncz5NmzaFl5eXzmn67KN79OihNS3/PrSwfXPeT0REBIDnv0OBgYEay3nRx9fXFwYGBpgyZYrO8s6dOxcKhQKRkZE6p1PRGMpdgMpk3bp1Gv+vXbsWUVFRWumNGjXC06dPAQD9+/dHt27dkJOTg7/++gvffPMNOnXqhN9++w3NmjXTWsb69evh4OCABw8eYNu2bfjoo490lqVWrVoIDQ0FADx58gRXrlzB9u3bsX79enzwwQdYv349jIyMNL7j7u6OTz/9VGtejo6ORW+EQowdOxZt2rRBTk4O7t69ixMnTiAkJASLFi3Cli1b8NZbb5XIcqhsmjVrFlxdXZGRkYFjx45hxYoV2LNnD86fPy/lUfeR7Oxs/Pnnn1i5ciUOHz6M8+fPw8HBodD5CyEwbNgwREREoEWLFggODoaDgwPu3LmDHTt2oHPnzjh+/Djat2+vtbz8PD09S67iVCZs374d/fv3h7W1NYYPHw5XV1dcu3YNP/zwA7Zt24bNmzfj3XfffenlFHUfDQC7d+9GbGwsWrVqVWCeJUuWIC0tTfp/z549+PHHH7F48WLY2tpK6Xn7tdrUqVM1lv/bb7/h66+/xv/93/+hUaNGUnrz5s2xYsUKLFy4EAMHDkSTJk2kadevX8esWbPw/vvvw8/P78UNQAUTJJuAgABR0CpISEgQAMT8+fM10vfu3SsAiNGjR2t9Jzc3V7i4uIjg4GDx3nvvCS8vL53z7tixo2jSpIlW+rNnz8Qnn3wiAIiJEydqTHN2dhZ+fn5FrVqBdNXr0KFDAoDYunWrVv64uDhhZ2cnLC0txe3bt196+VT2hIeHCwDit99+00gPDg4WAMTGjRsL7CMrVqwQAMTcuXM10v39/UXVqlU10ubPny8AiKCgIJGbm6tVjrVr14pTp04JIQrvk1TxXLlyRZiZmYmGDRuK5ORkjWl3794VDRs2FObm5uLq1atCCCFCQkIEAHH37l2d82vSpIno2LGjVro+++jatWsLKysr0aNHD41pBf02qKn7eUJCgs7pAERAQIDOaVu3bhUAxKFDh7SmPXz4UNSoUUO8/vrrGttPjx49hIWFBffPJYCnLMuZN998EwDwzz//aE07fvw4rl27hn79+qFfv344evQobt26VeR5K5VKfP3112jcuDGWL1+OR48elVi5i8vNzQ1LlizBw4cPsXz5crmLQ6+QekQ0ISGhwDyFbQ95PX36FKGhoWjYsCEWLFgAhUKhlWfQoEFo27btS5SYyqv58+cjPT0d3333HapXr64xzdbWFt9++y3S0tIwf/78l1qOPvvoatWqYfz48di1axfOnDnzUsstCRYWFli6dCmOHz+OVatWAXh++n/Xrl2YM2cOatSoIXMJyz8GZOXMtWvXAABWVlZa0zZs2IA6deqgTZs26NGjB8zMzPDjjz/qNX+lUon+/fsjPT0dx44d05iWnZ2Ne/fuaX3Up1dLS58+fVClShUcOHCgVJdDZYs6yLKxsSkwT2HbQ17Hjh1DSkoKBgwYAKVSWeQyPH78WGefF0IUeR5U9u3atQsuLi5SgJ9fhw4d4OLigl27dr3UcvTdR48bNw5WVlaYMWPGSy23pKhPS06aNAlXr17FuHHj0L59e3z88cdyF61CYEBWxqWnp+PevXtISkrCsWPHMHToUADPg5S8srOzsXXrVvTr1w8AUKVKFbzzzjvYsGGD3sts2rQpAO1RhwMHDqB69epan6VLlxanakVmZGSE+vXrv3AUhMq3R48e4d69e7h16xY2b96MWbNmoUqVKujevbuURx0g3blzB/v370dQUBAUCgV69+5d6LzVF/7ruu6yMMOGDdPZ59U3G1D59+jRI9y+fRtubm6F5mvevDlu3bqFx48fF2s5xdlHq1QqBAUFlZlRMgAICwtDVlYW2rRpg8TERHz77bc6R5xJf7yov4wLCQlBSEiI9L+5uTkWLlyoFZDt3bsX9+/fR//+/aW0/v37o0ePHoiPj9e4CPNF1Hen5d/xeHh44IsvvtDKX69evSLPu7jMzc2LvSOk8sHb21vjf2dnZ2zYsAE1a9bE33//DeB5gJRX9erVsW7dOp0X3ueVmpoK4PlpIH1Mnz5d56iJtbW1XvOhsku9X3lR31BPL+5+qLj76HHjxmHJkiWYOXMmfv7552ItuyQ5OzsjJCQEEydOxKRJk6QDeHp5DMjKuJEjR+L9999HRkYGDh48iK+//ho5OTla+davXw9XV1eYmJjgypUrAIA6derAzMwMGzZswFdffVXkZarv2Mm/g7K1tdX60XxV0tLS9P4xpfIlLCwM9evXh6GhIezt7dGgQQMYGGgO4qsDpLS0NOzYsQObNm3SyqOLSqUCoP+PabNmzWTr8/RqFDXQevz4MRQKhcadi4XJP2pU3H20hYUFgoKCEBISgrNnz77w9PyroD4Aat26tcwlqVgYkJVx9erVk34QunfvDqVSicmTJ6NTp07SxpCamopdu3YhIyND52jVxo0b8eWXXxZ5WFn9mIG6deuWUC1eTnZ2Nv766y8eiVVwbdu2feEOPm+A1LNnT6Snp2PEiBF444034OTkVOD3GjZsCAA4d+4cevbsWWJlpvLPwsICjo6O+PPPPwvN9+eff6JWrVowNjaGqakpABR4/Wx6erqUB3j5ffS4ceOwePFizJw5E0uWLClizai84TVk5czUqVNRrVo1TJs2TUrbvn07MjIysGLFCmzdulXj88UXX+D69es4fvx4keafk5ODjRs3wszMDG+88UZpVUMv27Ztw9OnT+Hr6yt3UaiMmTNnDjIyMvDll18Wmu+NN96AlZUVfvzxR50jzFS59ejRAwkJCVo3Mqn9+uuvuHbtGt5//30Az0/bAcDly5e18qanp+PmzZtSHuDl99HqUbKff/4ZZ8+efZmqUhnGgKycsbS0xMcff4z9+/cjLi4OwPOh8Ndeew2jRo1Cnz59ND6fffYZzM3Ni3Rxf05ODsaOHYuLFy9i7Nix0mkeOf3xxx8ICgqClZUVAgIC5C4OlTF16tRB7969ERERgcTExALzmZmZYdKkSbh48SImTZqk8y7J9evX4/Tp06VZXCqjPvvsM5iZmeHjjz/G/fv3NaalpKRg1KhRUKlU0hPuO3fuDGNjY6xYsQK5ubka+b/77js8e/YMXbt2ldJKYh8dFBQES0tLzJo1q4RqTWUNT1mWQ+qLPOfMmYNFixbh0KFDGDt2rM68JiYm8PX1xdatW/H1119LT99/9OgR1q9fD+D5EZ36Sf3//PMP+vXrh9mzZ2vN699//5W+k5e5uXmJnAb69ddfkZGRgZycHNy/fx/Hjx/H//73P1hYWGDHjh0vfBI7VU4TJkzAli1bpG2isHzx8fFYuHAhDh06hD59+sDBwQGJiYnYuXMnTp8+jRMnTmh8R90n82vevDmaN29e4nUhedStWxdr165F//790axZM60n9T948ACbNm2Cq6srAMDOzg7Tp0/HtGnT0KFDB7zzzjswMzPDiRMn8OOPP8LHx0d67dHt27eLtY/Oz8LCAuPGjcPMmTNLpxFIdgzIyiFHR0cMGDBAurssNzdX5zvP1Hr06IGffvoJe/fuxTvvvAMAuHXrFgYNGgTgeUBVo0YNeHp6YsWKFejSpYvO+cTFxUnfycvZ2blEArKvv/4awPPHXFhaWqJRo0aYOXMmRowYofWwRiK11q1bw8vLCytWrMCUKVNgYWGhM5+BgQHWrl2Ld999F9999x0WLFiA1NRUVK9eHR06dMC8efO0Xomk7pP5hYSEMCCrYHr37o0zZ84gNDQUq1atQnJyMnJzc2FqaorY2Fg0btxYI//UqVPh4uKC5cuXY9asWXj27BlcXV0xc+ZMTJo0SbrZZNOmTcXaR+sSFBSEJUuWlImHdlPJUwg+4ZCIiEjL2rVrMWTIEAwcOBBr166VuzhUwXGEjIiISIfBgwfjzp07mDx5MmrVqqXX44OI9MURMioRWVlZSElJKTSPhYUFqlSp8opKREREVH5whIxKxIkTJ9CpU6dC84SHh2PIkCGvpkBERETlCEfIqEQ8ePAAsbGxheZp0qQJatSo8YpKREREVH4wICMiIiKSGR8MS0RERCSzSnsNWW5uLm7fvo1q1aoV+R2PVPkIIfD48WM4OjoW6SXWcmF/phdhX6aKorz0ZX1V2oDs9u3bhb6MmCivmzdvolatWnIXo0Dsz1RU7MtUUZT1vqyvShuQVatWDcDzFfoy72zMzs7GgQMH4OPjU+ArL8oT1kdTamoqnJycpP5SVhXUnyva+iyqylpvoOC6sy+XX5W17uW9L+ur0gZk6qFwlUr10gGZmZkZVCpVhdhQWB/dyvqpk4L6c0Vbn0VVWesNvLju7MvlT2Wte3nvy/qqOCdfiYiIiMopBmREREREMqu0pyxfxGVyZJHymSgF5rUFms7Yj8yc8j98Wpnrc22O3ysqFRV1+8qL64cA/fZN7DNUnnCEjIiIiEhmDMiIiIiIZMaAjIiIiEhmDMiIiIiIZMaAjIiIiEhmDMiIiIiIZMaAjIiIiEhmDMiIiIiIZMaAjIiIiEhmDMiIiIiIZMaAjIiIiEhmpRqQzZkzBwqFAkFBQVJaRkYGAgICYGNjA3Nzc/Tu3RtJSUka37tx4wb8/PxgZmYGOzs7TJgwAc+ePdPIc/jwYbRs2RImJiaoW7cuIiIiSrMqRETlwrx589CzZ098+umnUlpGRob0v6OjY6nud8PCwuDi4gJTU1N4eHjg9OnTJV9Jogqo1AKy3377Dd9++y2aN2+ukT5+/Hjs2rULW7duxZEjR3D79m306tVLmp6TkwM/Pz9kZWXhxIkTWLNmDSIiIjB9+nQpT0JCAvz8/NCpUyfExcUhKCgIH330Efbv319a1SEiKvN+++03rFq1Ci4uLhrp48ePx759+wAAkZGRpbbf3bx5M4KDgxESEoIzZ87Azc0Nvr6+SE5OLt2KE1UAhqUx07S0NHz44Yf4/vvv8cUXX0jpjx49wg8//ICNGzfirbfeAgCEh4ejUaNGOHnyJNq1a4cDBw7gwoUL+OWXX2Bvbw93d3fMnj0bkyZNwowZM2BsbIyVK1fC1dUVCxcuBAA0atQIx44dw+LFi+Hr61saVSIiKtPU+90VK1bgs88+k9LV+91Vq1bB398fLVq0KLX97qJFizBixAgMHToUALBy5UpERkZi9erVmDx5ss5yZ2ZmIjMzU/o/NTUVAJCdnY3s7GwpXf23iYEocpvk/X55pq5HRalPURVU74raDqUSkAUEBMDPzw/e3t4aAVlsbCyys7Ph7e0tpTVs2BC1a9dGTEwM2rVrh5iYGDRr1gz29vZSHl9fX4wePRrx8fFo0aIFYmJiNOahzpP31Gh+Rd3o1UyURdvo1TsHfXYSZVllro+uflBRN3yqeNT73c6dO2ukq/e7Xl5eUlpp7HezsrIQGxuLKVOmSNMNDAzg7e2NmJiYAssdGhqKmTNnaqUfOHAAZmZmWumzW+cW2g557dmzp8h5y4OoqCi5iyCL/PVOT0+XqSSlq8QDsk2bNuHMmTP47bfftKYlJibC2NgYlpaWGun29vZITEyU8uTdKainq6cVlic1NRVPnz5FlSpVtJat70Y/r20hldRBn51EeVAZ66Nr511RN3yqWMrCfvfBgwfIycnRmefSpUsFln3KlCkIDg6W/k9NTYWTkxN8fHygUqmk9OzsbERFReHz3w2QmasocH55nZ9RMc6YqOvepUsXGBkZyV2cV6ageqsHVCqaEg3Ibt68iXHjxiEqKgqmpqYlOeuXVtSNXq3pjKJdj2ZiIDC7da5eO4myrDLXR9fOu6Ju+FRx5N/vlrdRXRMTE5iYmGilGxkZ6Qw+MnMVyMwp2r6pogUvBbVJRZe/3hW1DUo0IIuNjUVycjJatmwppeXk5ODo0aNYvnw59u/fj6ysLDx8+FDjaC0pKQkODg4AAAcHB627ctR3A+XNk/8OoaSkJKhUKp2jY0AxNvoibvBSfj12EuVBZayPrn5QUTd8qjgK2u9euHAB33zzjcZ+N6+S3u8qlUoolUqdedTzIKKClehdlp07d8a5c+cQFxcnfVq3bo0PP/xQ+tvIyAjR0dHSdy5fvowbN27A09MTAODp6Ylz585p3JUTFRUFlUqFxo0bS3nyzkOdRz0PIqLKIv9+97fffkPdunXRv39/jf3ukSNHpO+Uxn7X2NgYrVq10siTm5uL6Oho7puJiqBER8iqVauGpk2baqRVrVoVNjY2Uvrw4cMRHBwMa2trqFQqjBkzBp6enmjXrh0AwMfHB40bN8agQYMwb948JCYmYtq0aQgICJBGuEaNGoXly5dj4sSJGDZsGA4ePIgtW7YgMjKyJKtDRFTm5d/vZmdnw8TERGu/O3XqVADA2bNnMWXKlFLZ7wYHB8Pf3x+tW7dG27ZtsWTJEjx58kS665KICvbKn9S/ePFidO/eHb1790aHDh3g4OCA7du3S9OVSiV2794NpVIJT09PDBw4EIMHD8asWbOkPK6uroiMjERUVBTc3NywcOFCrFq1io+8ICLSIe+jKbp161Zq+92+fftiwYIFmD59Otzd3REXF4d9+/ZpXehPRNpK5bEXeR0+fFjjf1NTU4SFhSEsLKzA7zg7O7/wdmUvLy+cPXu2JIpIRFShfPnll+jWrZv0v6mpqRRA3blzR+eNTCW13w0MDERgYGDxCk5UifFdllRpZdw8j+RtM3ErbDCuz+2OnTt3akwXQuDLL78E8PzWfW9vb/z9998aeVJSUvDhhx9CpVLB0tISw4cPR1pamkaeP//8E2+++SZMTU3h5OSEefPmaZVl69ataNiwIUxNTdGsWbMK9/wkIiIqHAMyqrREVgaM7F6DdZdROqfPmzcP3377LQAgOjoaVatWha+vLzIyMqQ8H374IeLj4xEVFYXdu3fj6NGjGDlypDQ9NTUVPj4+cHZ2RmxsLObPn48ZM2bgu+++k/KcOHEC/fv3x/Dhw3H27Fn07NkTPXv2xPnz50up5kREVNYwIKNKq0qd1rDqMAhm9dtrTRNCYMmSJdIraJo2bYq1a9fi9u3b0kjaxYsXsW/fPqxatQoeHh544403sGzZMmzatAm3b98GAGzYsAFZWVlYvXo1mjRpgn79+mHs2LFYtGiRtKylS5fi7bffxoQJE9CoUSPMnj0bLVu2xPLly0u/EYiIqEwo9WvIiMqjhIQEJCYmarxuxsLCAh4eHoiJiUG/fv0QExMDS0tLtG7dWsrj7e0NAwMDnDp1Cu+99x5iYmLQoUMHGBsbS3l8fX0xd+5cPHjwAFZWVoiJidF4aLE6T/5TqHnp+/6/svaw0KK+miwvfepQVuv9KlS29/8RVRQMyIh0UL8uxs7OTiM9/+tm8k83NDSEtbW1Rh5XV1eteainWVlZFfhKGvU8dNH3VWBl7R14+r6aDCjeewnLWr1fpcry/j+iioIBGVE5pO/7/8raO/CK+mqyvPR5L2FZrferUNne/0dUUTAgI9JB/aqXvE8uB56/Bsbd3V3Kk3/6s2fPkJKS8sLXzeRdRkF5CnvdjL6vAitr78Arzmu5ilP+slbvV6myvP+PqKLgRf1EOri6usLBwUHjdTOpqak4deqUxutmHj58iNjYWCnPwYMHkZubCw8PDynP0aNHNa7fiYqKQoMGDWBlZSXl4avAiIgqNwZkVGnlZj1FVtJVZCVdBfD8Qv64uDjcuHEDCoUCQUFBmD9/PgAgPj4egwcPhqOjI3r27AkAaNSoEd5++22MGDECp0+fxvHjxxEYGIh+/frB0dERADBgwAAYGxtj+PDhiI+Px+bNm7F06VKN043jxo3Dvn37sHDhQly6dAkzZszA77//zodrEhFVIgzIqNLKSvwbdyLG4k7EWADP38PXokULTJ8+HQAwceJEfPzxxwCATp06IS0tDfv27YOpqak0jw0bNqBhw4bo3LkzunXrhjfeeEPjGWMWFhY4cOAAEhIS0KpVK3z66aeYPn26xrPK2rdvj40bN+K7776Dm5sbtm3bhp07d2q9F5aIiCouXkNGlZZp7eZwnrRb+v/aHD+N6QqFAlOnTsW8efOQnJys83Uz1tbW2LhxY6HLad68OX799ddC87z//vt4//339Sg9ERFVJBwhIyIiIpIZAzIiIiIimTEgIyIiIpIZAzIiIiIimTEgIyIiIpIZAzIiIiIimTEgIyIiIpIZAzIiIiIimfHBsET00lwmR8pdBCKico0jZEREREQyY0BGREREJDOesiSickGf06ImSoF5bUuxMEREJYwjZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyK/GALDQ0FG3atEG1atVgZ2eHnj174vLlyxp5MjIyEBAQABsbG5ibm6N3795ISkrSyHPjxg34+fnBzMwMdnZ2mDBhAp49e6aR5/Dhw2jZsiVMTExQt25dRERElHR1iIjKtPz73N69e+Pff//VyJORkYFPP/0UAODo6Fiq+9ywsDC4uLjA1NQUHh4eOH36dMlWmKiCKvGA7MiRIwgICMDJkycRFRWF7Oxs+Pj44MmTJ1Ke8ePHY9euXdi6dSuOHDmC27dvo1evXtL0nJwc+Pn5ISsrCydOnMCaNWsQERGB6dOnS3kSEhLg5+eHTp06IS4uDkFBQfjoo4+wf//+kq4SEVGZlX+f++zZM8yYMUNrn7tv3z4AQGRkZKntczdv3ozg4GCEhITgzJkzcHNzg6+vL5KTk19BSxCVbyX+pH71Rq8WEREBOzs7xMbGokOHDnj06BF++OEHbNy4EW+99RYAIDw8HI0aNcLJkyfRrl07HDhwABcuXMAvv/wCe3t7uLu7Y/bs2Zg0aRJmzJgBY2NjrFy5Eq6urli4cCEAoFGjRjh27BgWL14MX1/fkq4WEVGZlH+fu2rVKtSsWRNnzpzBW2+9Je1zV61aBX9/f7Ro0aLU9rmLFi3CiBEjMHToUADAypUrERkZidWrV2Py5Mk6y5+ZmYnMzEzp/9TUVABAdnY2srOzpXT13yYGoshtk/f75Zm6HhWlPkVVUL0rajuU+quTHj16BACwtrYGAMTGxiI7Oxve3t5SnoYNG6J27dqIiYlBu3btEBMTg2bNmsHe3l7K4+vri9GjRyM+Ph4tWrRATEyMxjzUeYKCgnSWo6gbvZqJsmgbvXrnoM9OoiyrzPXR1Q8q6oZPFZd6n2tlZQXgv32ul5eXlKc09rlZWVmIjY3FlClTpOkGBgbw9vZGTExMgeUNDQ3FzJkztdIPHDgAMzMzrfTZrXNf3Aj/3549e4qctzyIioqSuwiyyF/v9PR0mUpSuko1IMvNzUVQUBBef/11NG3aFACQmJgIY2NjWFpaauS1t7dHYmKilCfvjkE9XT2tsDypqal4+vQpqlSpojFN341e3/fg6bOTKA8qY3107bwr6oZPFVNubi4+++wzNGrU6JXvcx88eICcnBydeS5dulRgmadMmYLg4GDp/9TUVDg5OcHHxwcqlUpKz87ORlRUFD7/3QCZuYqiNAfOz6gYZ0vUde/SpQuMjIzkLs4rU1C91QMqFU2pBmQBAQE4f/48jh07VpqLKZKibvRqTWcU7Vo0EwOB2a1z9dpJlGWVuT75d96zZs3CF198AQCwsLAAADRo0ED6cVFfKL1p0yZkZmbC19cX33zzjcYP0o0bNzB69GgcOnQI5ubm8Pf3R2hoKAwN/9v0Dh8+jODgYMTHx8PJyQnTpk3DkCFDSqL6VMkEBAQgPj4en3/+udxFKTITExOYmJhopRsZGekMPjJzFcjMKdq+qaIFLwW1SUWXv94VtQ1KLSALDAzE7t27cfToUdSqVUtKd3BwQFZWFh4+fKhxxJaUlAQHBwcpT/47c9R3BOXNk/8uoaSkJKhUKq3RMaAYG30RN3gpvx47ifKgMtYnfz9QKpVo1KgRLl68iL/++gvVqlXTCKTGjx+PyMhIbN26FRYWFggMDESvXr1w/PhxAP9dKO3g4IATJ07gzp07GDx4MIyMjPDVV18B+O9C6VGjRmHDhg2Ijo7GRx99hBo1avBaSNKLep8bHR2NixcvSul597l5lfQ+V6lUQqlU6syjngcRFazE77IUQiAwMBA7duzAwYMH4erqqjG9VatWMDIyQnR0tJR2+fJl3LhxA56engAAT09PnDt3TuPOnKioKKhUKjRu3FjKk3ce6jzqeRCVBHUAZm9vDwcHB9ja2gKAdKH0okWL8NZbb6FVq1YIDw/HiRMncPLkSQCQLpRev3493N3d0bVrV8yePRthYWHIysoCAI0LpRs1aoTAwED06dMHixcvlqfCVO4UdZ975MgRKa009rnGxsZo1aqVRp7c3FxER0dzv0xUBCU+QhYQEICNGzfi559/RrVq1aTrDywsLFClShVYWFhg+PDhCA4OhrW1NVQqFcaMGQNPT0+0a9cOAODj44PGjRtj0KBBmDdvHhITEzFt2jQEBARIo1yjRo3C8uXLMXHiRAwbNgwHDx7Eli1bEBkZWdJVokrsn3/+AQA0b94cr7/+OkJDQ1G7dm3Zbk5R0/fOtNK+OaGoN8G8KuqbOCrDTRljxozBpk2b8NNPP8HU1BQ3b97EgwcPkJqaCpVKBTMzMwwdOhT/93//BwA4e/YspkyZUir73ODgYPj7+6N169Zo27YtlixZgidPnkh3XRJRwUo8IFuxYgUAaNzRAzx/tIX6upjFixfDwMAAvXv31rj2Rk2pVGL37t0YPXo0PD09UbVqVfj7+2PWrFlSHldXV0RGRmL8+PFYunQpatWqhVWrVvE0D5UYDw8PfPPNNxgyZAgWLVqEBQsW4M0338T58+dluzlFTd+bVEr77ix9b4J5VSrDXWnffvstAGgF9mPGjEHnzp2laQkJCbh16xa6detWavvcvn374u7du5g+fToSExPh7u6Offv2afVxItJW4gGZEC8+UjY1NUVYWBjCwsIKzOPs7PzCW5a9vLxw9uxZvctIVBRdu3ZFamoqhgwZAm9vb7z11ltwdnbGli1bCgyUXhV970wr7buzinoTzKuivpmjMtyVpj79rVbQOn/rrbdga2uLO3fu6LyRqaT2uYGBgQgMDNSjBkQEvILnkBFVFJaWlqhfvz6uXLmCLl26yHJzipq+N6mU9t1ZZfUGkMp6VxpQee5MI6oo+HJxoiJKS0vDP//8gxo1avDmFCIiKlEMyIgK8Nlnn0nP0Dt16hTee+89KJVK9O/fX+PmlEOHDiE2NhZDhw4t8ELpP/74A/v379d5ofTVq1cxceJEXLp0Cd988w22bNmC8ePHy1ZvIiJ69RiQERXg1q1bGD58OABgyJAhsLGxwcmTJ1G9enUAz29O6d69O3r37o0OHTrAwcEB27dvl76vvlBaqVTC09MTAwcOxODBg3VeKB0VFQU3NzcsXLiQN6cQEVVCvIaMqACbNm1CamoqLCwscPHiRa0LoXlzChERlRSOkBERERHJjAEZERERkcx4ypKI6BVymaz/20SuzfErhZIQUVnCgIyINBQnYCAiopfDgIyIqIzTJ0g2UYoy+yorIioYryEjIiIikhkDMiIiIiKZMSAjIiIikhkDMiIiIiKZ8aJ+Iqqwms7Yj8wcRZHz8/ESRCQXjpARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHM+NgLokpA38c/UNHxZexEVBI4QkZEREQkM46QERH9fxztIiK5cISMiIiISGYMyIiIiIhkxoCMiIiISGYMyIiIiIhkxoCMiIiISGblPiALCwuDi4sLTE1N4eHhgdOnT8tdJKJiYV+mioJ9mUh/5Tog27x5M4KDgxESEoIzZ87Azc0Nvr6+SE5OlrtoRHphX6aKgn2ZqHjKdUC2aNEijBgxAkOHDkXjxo2xcuVKmJmZYfXq1XIXjUgv7MtUUbAvExVPuX0wbFZWFmJjYzFlyhQpzcDAAN7e3oiJidHKn5mZiczMTOn/R48eAQBSUlKQnZ2tld/w2ZMilcMwVyA9PReG2QbIyS3/r6apzPW5f/++Vtrjx48BAEKIUikfoH9fBoren7Ozs5Genl5h1mdRVbR+rA913e/fvw8jIyMpvTL2ZV3bdHmkrnv+dVrRFVTvV9GX5VBuA7J79+4hJycH9vb2Gun29va4dOmSVv7Q0FDMnDlTK93V1fWlyzLgpedQtlTW+tguLHja48ePYWFhUSLlyU/fvgyUbn+uKCpaP9ZHYXWvTH25sG2ayr/S7MtyKLcBmb6mTJmC4OBg6f/c3FykpKTAxsYGCkXxj6BTU1Ph5OSEmzdvQqVSlURRZcX6aBJC4PHjx3B0dCyF0hVfUftzRVufRVVZ6w0UXHf25fKrsta9vPXll1VuAzJbW1solUokJSVppCclJcHBwUErv4mJCUxMTDTSLC0tS6w8KpWqQm0orM9/SvsITN++DOjfnyva+iyqylpvQHfd2ZfLt8padzn6shzK7UX9xsbGaNWqFaKjo6W03NxcREdHw9PTU8aSEemHfZkqCvZlouIrtyNkABAcHAx/f3+0bt0abdu2xZIlS/DkyRMMHTpU7qIR6YV9mSoK9mWi4inXAVnfvn1x9+5dTJ8+HYmJiXB3d8e+ffu0LigtTSYmJggJCdEaci+vWB95lFZfLi/1L2mVtd6A/HVnXy55lbXula3eClHR7hslIiIiKmfK7TVkRERERBUFAzIiIiIimTEgIyIiIpIZAzIiIiIimVWqgCwiIgIKhULjY2dnh06dOmHv3r1SvmvXrkGhUGDBggU657NgwQIoFApcu3YNCQkJMDMzQ//+/XXm3bx5MxQKBcLCwgAAQ4YM0SqD+mNqaip97/DhwxrTlEol7Ozs0KdPH1y8eLHYbXDjxg2MGjUKLi4uMDExgZ2dHXr27Injx49r5dW3DPnrZm5ujtdeew19+vTBTz/9hNzcXK3veHl5FdgeDRs2lPLlX3eGhoaoWbMmhgwZgn///VfvdlDP7/fff5fSZsyYobEMMzMz1K5dGz169EB4eLjG+/bkcu7cOfTp0wfOzs4wNTVFzZo10aVLFyxbtkzK4+LiUmCbvv3221I+dX3v3btX4PLUfWDbtm2Flqug5SkUCowaNUrKl7+PmJiYoH79+pg+fToyMjKK3S67d+/G22+/DRsbG5iamqJ+/fr47LPPdL7LUN8y5O931tbWaNWqFcaNG4cLFy5o5VfvPwr6zJkzR8qbv/9XqVIFzZs3x5IlS3RuLy/i5eWFpk2baqTp6g9169bFyJEjcerUKRw7dgxdu3ZFzZo1YWpqKvX5jRs36rXs/O1qaGgIJycn9OvXT6uddG1/eXXv3h0uLi4AgE2bNkGhUODbb7/VmXf06NEwMjLCH3/8UWB9C+v/6o+RkRFcXFwwduxYPHz4UK+6552fgYEBbt68qTU9NTUVVapUgUKhQGBgoM55XLx4UfotKKgM+vSZgn7LhBD4+OOPoVAoMGPGDADa+/v8n02bNmm1WUEfLy+vIrVZ3mWuX79eZ57XX38dCoVCq1+r5eTkwNHREQqFQuN3PK+C9nU3b95EnTp1YG1tjTNnzgCQ9ze6XD/2orhmzZoFV1dXCCGQlJSEiIgIdOvWDbt27UL37t2LPJ+1a9di9erVyMrKwqZNm+Dp6YmxY8dK01NTUzF+/Hh4eHhg9OjRUrqJiQlWrVqlNT+lUqmVNnbsWLRp0wbZ2dn4888/sXLlShw+fBjnz5+Hg4MDQkNDsX37dly6dAlVqlRB+/btMXfuXDRo0ECaR0ZGBj799FOsW7cOjx8/hqGhIYYPH442bdogMTERERERePPNN9GoUSMkJCTA3Nwc/v7+0s5LXYZz584hPDwcP/30E3bs2IFFixZh3LhxGuU1NDSEhYUFHj16hOrVq8PLywuxsbHo06cPvLy88PPPP2s9cblWrVoIDQ3VqruFhQXmzJmDKVOmoEuXLgCer7tatWph7dq1iImJwZo1a7Bt2zbEx8fD2dlZ+u6NGzcwevRoHDp0SKpPaGgoDA01u/zAgQORkJAAJycnaYNfsWIFzM3NkZmZiR07diAqKgq7d+9GQEAANm/ejB49emiV9VU4ceIEOnXqhNq1a2PEiBFwcHDAzZs3sWXLFgQHB2PChAlwc3NDVlYW3N3d8emnn2rNw9HREVu3bsXnn3+OK1euAACioqIKPKDQR5cuXTB48GCt9Pr162v8n7f/P3r0CD///DNmz56Nf/75Bxs2bCjy8sLCwjB//nzcunULOTk5qFevHiZNmiTtXJcvX45NmzYhOjoaMTExWs/BMjQ0RHh4eJHKoK6bEAKPHj3CH3/8gTVr1uCbb77B3LlzNV79o9a/f39069ZNK71FixYa/+ft//fu3cPGjRsxfvx43L17F19++aXW948ePYr58+cjNjYWd+7cwY4dO9CzZ89C26pu3brIzs7GjRs3IISAjY0Ndu3ahe+//14q07hx42BlZYWEhAQcPXoU33//PQYM0O+NoHnX7bNnz/DPP/9g5cqV2LdvHy5cuPDCV92o1+nNmzdhaGiI06dPo1+/flizZg0mT56Mnj17ajw+IzQ0FCtXroRSqcTAgQMxd+5cACi0/+en3t6fPHmC6OhoLFu2DGfOnMGxY8f0qnveNvjxxx8xceJEjfTt27cX+r2wsDD83//9H4DnL2mfP3++zvUPAFZWVnjw4AGA5/v3c+fOFdpn8hJC4JNPPsF3332Hzz//XArI1NT7+/w8PT3RuHFj1K1bV0pLS0vD6NGj8d5776FXr15SelEfcaIOogFg0KBBMDc31+jL165dw4kTJ7QCoeDgYMTHx8PJyQnvvfce7ty5AxcXF2zYsAFdu3Yt0rL//fdfdOrUCSkpKfjll1/QsmVLaVpJ/kbrRVQi4eHhAoD47bffNNJTUlKEkZGRGDBggBBCiISEBAFAzJ8/X+d85s+fLwAIIyMjsXr1avHHH38Ia2trYWBgIK5duyblCwwMFIaGhuKPP/6Q0vz9/UXVqlVfWNZDhw4JAGLr1q0a6StWrBAAxNy5c4UQQvj6+orw8HBx/vx5ERcXJ7p16yZq164t0tLSpO+MGjVK1KxZU1hbWwsbGxvh7u4u2rdvL01//PixMDMzEwBEeHi42LNnj7C1tRUDBgyQynD16lVhZmYmgoODxfTp0wUAoVAoxL59+6T5dOjQQQAQq1evFvHx8WLEiBHC0tJSJCUlidDQUAFAfPDBBxr16dixo2jSpInONjh9+rRwcXERzZs3F126dJHW3ahRo4STk5OIjo4W/v7+AoCoX7++9L1nz56Jpk2bCm9vb3H27FmpPlOmTJHyzJs3TwAQAwYMEBcuXBDLli0TCoVCABB3794VQgixadMmYWxsLFavXi3mzp0rFAqFUCqVIikp6YXrrzR069ZNVK9eXTx48EBKU5dxyZIlUpsrFArh7e2tcx7Hjx8XSqVSzJs3T3zyyScCgDA0NBTnzp3Tmb+gfpgfABEQEPDCOujq/7m5uaJdu3ZCoVCIxMTEF85DiP/qPXLkSAFAvPbaa8LCwkJj3Zw6dUqYmZmJZs2aiVWrVgmVSiXu3LkjPvjgA2FmZqaxrMLKUFDd7t27Jzw9PQUAERkZKaW/aP+Rl67+//TpU+Hs7CyqVasmnj17pvWdPXv2iKlTp4rt27cLAGLHjh2Fzq9mzZrCwMBABAcHiy+//FIAEAYGBuLnn38W1apVEwDE119/rbUcfft5Qfu23bt3CwDiu+++k9J07Yvzbm8dO3YU5ubm0v4jISFBmJmZif79+0v5jx49KgAIKysrERsbK6ZNmyaMjIyEo6Oj8PPze2F5Q0JCNLZ3tb59+woA4tSpU3rVXz2/Xr16CXd3d63pXbp0Eb1799bZnzZt2iSMjIyEra2t8Pf3Fy4uLsLQ0FDnOujYsaOoWbOm1J/v3LkjEhISRK1atbT6jK6+GBAQIACIqVOnasy3qNt6Xnfv3hUAREhISJG/k9ecOXMEANGuXTsBQKxZs0Zj+pdffins7e3FG2+8IZo0aaLxO5R3v123bl2xdOlSUbVqVY3fPrX86/rff/8V9erVE5aWllrxQEn/RuuDAZl4vjNWqVRi8ODBQoiiB2SDBg2S0o4fPy4ACC8vLyGEEL///rswMDAQkyZN0vjuy67s8+fPCwBi5MiROr+XnJwsAIgjR44IIYR4+PChFGwCEGvXrhUXL14UAERMTIwQ4vkOXh1s+Pr6CiGedyp1kLZ161YxceJEaUevLsNrr70m5RdCCFtbW2FoaCj9n5OTIxwdHUVoaKgQQggfHx+hUCjE5cuXpTwFBWSPHz8W9erVE1FRUaJjx45SQHbo0CFhZGQktYt6Z5+/PgYGBho/rCtWrBAqlUpkZmYKIYTo2rWrVl9o0qSJxkbbtm1bjR3niBEjBAAxbNgwnW1f2ho0aCD1L7X8ZczJyRFKpVI0aNBA5zw++OAD6cdKvZNq2bKl+Pjjj3XmfxUBmRBCfPbZZwKAOHHixAvnIcR/9W7QoIGwsrISDx480OhrajNnzhQAxKhRo4SFhUWxylBY3a5fvy4MDQ01DnBeNiATQog+ffoIAOL27duFfr8oAZlKpRLm5uZCiP/2gV26dBG+vr7CxMREGBsbi5o1a4rc3NwXlrcwBbXr77//Lh2oqenaF+fty35+fsLZ2VljnaoPog4cOCCEEMLNzU0AEHv37pXm4eHhIczNzV8qIFu+fLkAIDZu3KhH7f+b37Zt2wQAcfHiRWnanTt3hFKpFD/99JPO/tS2bVvx3nvvCQDi9OnT4scffxQAxOTJk7WWow7I1P1ZTVefyd8Xx44dKwBoHJyqyRGQqZe5Zs0aAUBrP9SkSRMxZswYqV/n/R0SQoj09HRhaGgo6tevL+7cuSMMDAzEhg0btJaTd13fvn1b1K9fX1hYWIjTp09r5S3t3+jCVKpryNQePXqEe/fu4e7du4iPj8fo0aORlpaGgQMHFun7z549AwC88cYbUlr79u3RoEEDHDlyBOfOncPHH38MFxcXhISE6JzHvXv3tD6pqakvXPa1a9cAPB+yLqhuAGBtbQ0AiI2NRXZ2Nq5cuQJTU1N88MEHaNiwIWrXro2YmBgAQExMDJo3b4433ngDBw8exNOnT+Hr64v09HRpvjExMfD29tYoQ4MGDaR5ZGVl4f79+xqnBA0MDODt7S3lGTRoEIQQiIqK0ihzTk6OVlsMHz4cPj4+0jLVLl68iOzsbK2yWFlZadSnWbNmGsPmvr6+SE1NRXx8PADgn3/+0Wq7OnXqSH9nZWUhNjZWY/nq03FHjhzR1fSlztnZGbGxsTh//nyBZTQwMICpqSlSUlJ09rHjx49rtelbb70ltd3LyMjI0LnMrKysF373Rf06L3W9GzdujMuXL+Pdd9+FpaWlRl9TU6+zuLg4pKWlwdnZGVu3bkVGRobUF4pTBrXatWujY8eOOHnypNb2m56errM91PuPwqiv/SnsJdtFlZmZCVtbW420du3aISYmBs7OzjAyMsK///6r83q44lDXMykpCTExMRg/fjxsbGwKvRxEV18GoLFOx48fDzc3N4wePRpXrlzBn3/+iRYtWmhcF+br64vMzExkZ2frbPunT5++sPzF6Qd5dejQAbVq1dK4Bm/z5s0wNzeHn5+fVn513dPT01GnTh20adMG7777LgwNDfG///2vwOWo+7OTkxPeffdd6fqzgvrM+PHj8fXXX2PSpEn46quvCpzv48ePdbadKMVnyJuZmQEAfv31Vyntjz/+QHx8vMZp87y/QwDwv//9Dzk5Obh9+zYcHBzg5eVV6GUPSUlJeOutt5CYmIj9+/frPDWrVlq/0YWplNeQ5d/oTUxMsHr1auk6pRdRByr5d3K+vr64evUqvLy8kJKSgn379qFKlSpa33/y5AmqV6+ule7r64t9+/ZppKk3DvX56aCgICgUCvTu3Vvr+7m5uQgKCsLrr78uXQ+VmJgIY2Nj/PXXX2jQoIH0Cgp7e3skJiZKeezt7dGwYUMcOXIEV65c0QhOHj9+jH///Revv/469u/fL5XBx8cHe/fuxdOnT/HgwQMIIaBQKDTKZG9vj0uXLgGAVKb8wdClS5d0tsdHH32klXbz5k0YGRkhLS0N0dHRmDlzJkxMTFC7dm2t+uQvh3oa8F/gmpe5uTkA4OnTp8jKykJOTo7GfNTlT0lJ0fruq/DZZ5+ha9eucHd3R9u2bdGiRQvk5OTAxsZGI59SqcTdu3d1tqmBgYFW21SvXl1ql5fxww8/4IcfftBK//HHH9GvXz+NNPXFtY8ePcLOnTvx008/oWnTphrXPhbk3r17yMnJwePHjwEAbm5uADT7mpqLiwtUKhUePHiA1atXo3nz5pg8eTJ++eUXtGvXDsePH0fVqlX1LkNeTZs2RXR0NK5du4bmzZtL6SEhIToPyGJiYtCuXTvpf/UBCQDcv38fP/zwA37//Xf4+fnp3H/oKycnR+vVMzY2NkhNTcXcuXOl61v79++Pnj17wsfHB+3bt4eBgf7H67r2bTVr1sSBAwd09kc19TrVtd2q16mhoSG+++47eHp6wsPDA0IIjBw5Uit/Tk5OgcsLDQ3F5MmTNdLU2/OTJ09w8OBBhIWFoXr16ujQoUPRK56HQqFAv3798OOPP2LWrFkAgA0bNqBXr146XwGkrvvJkyeli/2rVKmCevXqST/u+RkaGmLp0qVo3Lgxbt26hRkzZuDq1avo3Lmzzj6zfPlyXL9+HRMmTNC4qUSXYcOG6Uy/c+eO/tdE6enixYu4efMmnJycsGHDBrz22msa20r+ffv69evRqFEjXLhwAU+fPkW/fv3wySefFLj/8/Pzw4MHD7B//354eHgUWI7S+o1+kUoZkIWFhUkXGiclJWH9+vX46KOPUK1aNY0LE/VlYmICZ2dnXLlyBX379oWvr6/OfKampti1a5dWev4AD9DeOKpXr45169bpjOwDAgJw/vx5nRejPn78GNWqVSu0/Orp+Y8C1GWYM2cO5syZI5VB3yMAdcCj/iFVc3FxkS4uTk5ORkBAAObOnatzh6i++NnJyUn67vr16zFt2jS9ylIc6vLn5OSU+rJ06dKlC2JiYhAaGor9+/dLIwfvvPMO1qxZg3feeUfKqw4y8ivqBa/F8e677+q8e6xZs2Ya/+va2b3xxhtYs2aNVkBfGPWBUVH6dU5OjjRa5uDggJycHKSlpUnBXHHLABTcr0eOHIn3339fK3/jxo01/td1QPLOO+/oDG5Lmr+/Py5duoSlS5fiwoULOHfuHGbPno3XXnsN69atQ/v27fWaX959W25uLq5du4ZFixahW7duOHr0qNYNHvpq27YtRo0ahW+++QYGBgawsLDQmc/DwwNffPGFVnq9evW00vIH4M2aNUN4eLg0alMcAwYMwIIFC/Dbb7/BysoKv/32W6GjUsDzg5O8N9c0atQIFy9eRHx8PJo0aaKR9/r161rbmpmZmUZ/zispKQmA9g02ukyfPh1vvvmmVrr6rEtpMjc3x6ZNm/DZZ59h06ZNOm8SUrt//z7279+Pjz76SBrd7d27NwICArBlyxYEBARofScpKQnW1taoUaNGoeUord/oF6mUAVnbtm3RunVr6f/+/fujRYsWCAwMLNJdluoNNf8ttElJSXBxccGVK1c05p+fUqnUGqUriHrjSEtLw44dO7Bp0yadR66BgYHYvXs3jh49ilq1aknpDg4OyMrKgoWFhcYPRlJSknS04+DggNOnT0vTq1WrJm3A6jJs374dLi4usLa2lsqQlJQElUqFKlWqQKlUQqFQaA1r511OWlqaNP+8qlatKrXHzp078fDhQ3zyySfS9LwB0JgxY7Bs2TKsWbMGmzdvxtGjR2FiYqKzPvnLoZ4GPL+DM28d85avSpUqUKlUUCqVGnnU019mR/2y2rRpg+3btyMrKwu///473njjDaSnp6NPnz6Ii4tD48aNkZOTA3Nzc519rEaNGlr1vnv3bokc+daqVatI/Trvzu7WrVuYN28ekpOTizwaZGtrC6VSKZ0KVffbvH0gr8ePH8POzk6rDG3atIFSqYS/v7/eZciroH5dr169IrWH+oAkNzcX//zzD7788kvcvXtX486yl6FUKrUe2XL//n1p21U/XuLHH3+Eg4MDNm/ejJUrV6J79+64dOmSVtu9aFn569ytWzfUq1cPU6ZMwU8//aTze+p1mrdvKhQKnetU/UNXvXp1rb6clJQEpVIJW1vbIu9jf/rpJ6hUKty9exdff/01EhISXnpkskWLFmjYsCE2btwIS0tLODg44K233tKZ19bWFgrF80cwmZiYSHc/P3v2DEqlEhs2bNAK5nT1madPn+L69es6lzFp0iTs2bMHH3/8MSwtLdGnT58Cy96sWbMit11Ja9++PTZu3Ii2bdvi5s2bWnf5Ojg4SOt88+bNyM7OhpWVFczNzaXHH3l4eGDDhg06A7L169dj4MCB6NKlC44dO1Zg3y6N3+iiqJTXkOVnYGCATp064c6dO/j777+lHWFB1xuofwhOnTolpeXm5iI6Olrj1tmSoN44evbsKY2CjBgxQnrOjRACgYGB2LFjBw4ePAhXV1eN77dq1QpGRkawt7fH5cuXkZmZicuXL+PGjRvw9PQE8Px25nPnzuH333+HkZER6tWrh6ioKCnwaNasGbp164Zr165plGHnzp3SPIyNjWFjY6MRPKnbRJ1Hfe1T3tum8+vcuTPOnTuHuLg46dO6dWtpHr169YKRkRGqVq2K//3vf2jatCk++OADnfVJTk6W5hsVFQWVSiWNTuQ9Jat29epV6W9jY2O0atUK0dHRUtqff/4JoGhHmaXN2NgY7du3R5s2bfDmm28iOzsbW7duRW5uLjIyMgq8jsTT01OjTsDz28jVbfcqqHd23t7eGDJkCKKjo5GYmIiPP/64SN9Xrxv1NvDnn39q9TW169evIzU1VWtUSqlUIjk5GS1atChWGfI6f/48lEql1rZXVOoDEh8fH4wePRp79uzB6dOnpUcgvCwTExOt57GdOnVKa7ts0qQJ3nzzTSxfvhzTpk3DgwcPCnyukz5q1aqFBg0a4OjRo1Ja/n1s/u0tPT0dpqamOtepWrNmzbT6clRUlM7TgoXp0KEDvL290b9/f0RFRaFKlSr48MMPi/UcuLwGDBiAzZs3Y+PGjejbt2+BP9LqZ98lJSWhXr160kd9fdTGjRu1DnTz95ldu3YhJSVF57WxwPORp71796Jhw4b48MMPceDAgZeqW2np0KED4uLiMGPGDLi5uWltt3n3X+prxb766iukpaVJ7Xbs2DHExMRo7M/VOnbsiC1btiAhIQG+vr46L13R14t+o/XBgOz/U19om5aWhurVq8PMzAyXL1/Wmffy5cswMTHB+vXrsWbNGly8eBGjR4/GkydPCj3yKAlz5sxBRkaG9KyZgIAArF+/Hhs3bkS1atWQmJiIxMREaUdnYWGB4cOHIykpCRkZGZg3bx6GDh0KT09P6dy8j48P6tati5iYGLRp0wZHjx7FtGnTNJ4HM2rUKFy9ehUTJ07EiBEj8PTpU+zatQvjx4+X8jRu3BjZ2dlabaJ+/tO6deugUCgKvVavWrVqaNq0qcanatWq0mkhc3NzDB8+HMHBwTh69CiGDBmC5ORk1K5dW6M+jRs3xqBBg/DHH39g//79mDZtGgICAqSddadOnQAAX3/9NS5duoRvvvlG6yLv4OBgfP/991J91D/WY8aMKd7KKwXqdgCACxcuYPTo0cjNzZVO6Q4ePBhTpkyR8o8bNw779u3DwoULpRHeuLi4Ah9U+SrUqFED48ePx65du3Dy5MkifSc4OBjbtm2Dg4MDfvrpJwwfPlyjr6nrvXbtWgDPL2w/cOAArl69ivv37yMzMxPXr1+XrlMsThmA58+7O3LkCDw9PV946rSomjdvjoEDB+Lbb7/FjRs3tKanpaVJBysAkJCQgLi4OClvUlKSxqmeatWq4cmTJ5g4cSLu3LkDAPjll18wfvx46ajeyckJjRo1kr6jHuFX539Zz549k0YSAUjPDMy7j827vV24cAFpaWk616lav379pL586dIlzJgxA7///rvWcw71YW5ujpCQEMTFxWHLli3Fng/wPCC7c+cO/vrrr0Kf57Z9+3YIIWBoaIiAgAAsXrwY3t7eMDMzw+TJk3H9+nV07dpVo+53796V+vOZM2cwb948GBgYID4+XmefAZ5fN3jgwAHUqFEDvXr1KpEbeV6W+ncqISEBwPNA3cHBAYcPH8aAAQMwZcoUjb6s/h0aOXIkTpw4gY4dO8LAwABTp07F1q1bsXXrVmzevBnGxsYFPti4R48eWL16Nf744w907969SDd66CP/b7Re9L4vsxwr6LEXWVlZol69esLY2Fg8evRICCFEz549hUqlEtevX9fIe/36dVGtWjXRs2dPsWzZMlG7dm1hbGws2rZtK06ePPnCW95f9pZaIZ4/usDExETcuXNHeuRD/k94eLiU/+nTp2LYsGHSc7Z8fHzEnTt3NKarnwNjbGwsbG1txaeffip++eUXjTIcOnRIuLu7C2NjY1G1alVhaGioMR9/f39hbGys1SZCCOk5ZP369dOoS2HPIcubJ+9zyJ4+fSo++eQTYWVlJczMzISVlZWoXr26ePr0qfSda9euia5du4oqVapI9cnOzpamq/tC/fr1hbGxsXjttdfEu+++q3UbvHodK5VKAUA0a9as0LKWpoMHD+p8NIG63EqlUrRt21Y4ODhIt/137NhR+Pv7a+TfsmWLqF+/vjAwMHjh7f2v6rEX9+7dE2ZmZuLdd9994TzUli1bJmxsbAQAYWNjI44fPy5N69ixo+jevbuoWrWqaNq0qRgzZozUL01NTYVSqRRnzpwpUhkKqtv9+/dF+/bthUKh0Hj0Qkk89iI+Pl4oFAoxbtw4rWnqdZL/4+/vLzp27CgsLS1Fx44dpfzOzs6iXbt2wt3dXerH06dPF+np6eL1118XAMTKlSs1ljF69GgBQGzfvv2FdVAraN1evnxZGBoaCg8PDyktMzNT2NnZCQ8PD5GRkSGlL1u2TNja2goAonbt2tL+Q91W/v7+GvtxdV82NjYWTZo0EZGRkcLZ2fmlHnuRlZUlatWqpfNZYvrOb8mSJVqPYsnfnzp37ixee+01nb8nGRkZwtzcXNSoUUPajjt27ChsbGykvPb29qJbt25i27ZtWn1GV1/866+/hJ2dnbCyshJ//vmnlC7HYy8WL16ssy+7ubmJ27dvS30673Zy6NAh4eDgIPWRvL91al26dBENGzaU/te1bpYuXSoAiK5du4qsrCwpvaR/o/VRKa8h27t3r3TnTnJyMjZu3Ii///4bkydPlo6uvvrqK7Rr1w4tW7bEyJEj4eLigmvXruG7776DQqHAV199hUaNGmmNLBR0V0xez549K/A1Ee+99x6qVq1a6PcnTJiALVu2YMmSJUW6FdnU1BQ//PADhgwZAj8/P5w6dQoLFixA48aNpSf1X7lyBV9//bXG6M/hw4c15uPl5YWzZ88CAH7//Xe0adMGS5Ys0bhrR6FQSEcGGRkZ2L17N0aOHIk///wTnTp1wnfffadVvkePHhXYHgMHDsThw4cREREhPS7D1NQUYWFh0uuotm3bhvfffx8RERHSa3qcnZ2xZ8+eF7bNhg0bpNGAGTNm4Oeff8a2bdtgbm6OrKwsPHjwAE5OTrhx4wbc3NwQGRn5wnmWljFjxiA9PR3vvfceGjZsiKysLJw4cQK7d++Gi4sLzp49C0tLS7i4uODff/+VblYBILWvubk53n//fbz//vuYMWMGZs6ciXPnzmmd6jAwMNA4ZfbTTz9p3cEIPL8oXD0a99dff+lcj/b29i+8g9nGxgZDhw7FN998g4sXL2qM1hQkMDAQgYGBCAoKwtKlSxEQEIAPP/wQVlZWaNKkCVavXg0bGxts27YNDRo0wNdffw3g+atRtm3bpvXE/MLKoK6bEAKpqan4448/sHXrVqSlpWHRokUaj15QO3PmjM72qFOnzgtPETdu3BjdunXDqlWr8Pnnn2vcSevl5VXgdu/l5YWaNWtqbbvqt3Won8B/6dIlvPbaa0hMTIStrS2uX7+OH374AU+ePMEvv/yCXbt2oU2bNnq/lSLvvk19Uf/KlSuRm5urccepsbExFixYAH9/f7Rp0wZ9+/aFjY0Nzp07h4cPH6J58+Y4efKkxrVc6jpFRERIaeq+nJ+6/+eX/0nwuhgZGWHcuHGYMGEC9u3bp3PdFlX+N5nkd/v2bRw6dAhjx46V+nN+vr6+OHz4sHTjE/D8Wir1qea8CuozedWrVw/79++Hl5cXfH19cezYMbz22mvS9F9//VXnK8SaN2+ucRdxSXB3dwcAbN26VefZJfW6zvsqJi8vL+m6PPXvUX7vvPMOxowZgzNnzhR4GdHYsWORkpKCmTNnYvDgwdiwYYN0Wrkkf6NfdFerBr3Ct3JOfWSV92Nqairc3d3FihUrtEYfLl68KPr27Svs7OyEoaGhsLOzE/369dN44F9+RRkhy1+GvJ+EhAQhxIuPVry8vIRKpRIPHz7Uqw0SEhLEiBEjRO3ataUnQ7/zzjvi119/1cqrbxny183MzEy4uLiI3r17i23btomcnByteXTs2LHQ9lAraHRTiOcPQ61Tp46oU6eOzieb66JrfuqjqLx9o1atWqJ79+5i9erVGkfycti7d68YNmyYaNiwoTA3NxfGxsaibt26YsyYMRpP9HZ2di6wPZ2dnaV8+eub96NUKoUQBY/GqD/qflNYnryjNYUdff7zzz9CqVRqjegVxc6dO0WXLl2ElZWVMDExEXXr1hWffvqp1uhHccqQty4GBgbC0tJStGjRQowbN07Ex8drzUO9Dyjok3fehY0QHz58WO/RB13z09UfXnvtNTFixAgxe/Zs0a9fP1GnTh1RpUoVYWpqKho3biymTp0qUlNTi7xcIXTv21QqlejcubP45ZdfdH5n7969olOnTkKlUgkjIyPh6uoqgoODNd5GkV9h+4KC6ltY/9fVRx49eiQsLCw0+u6LFDa/vJBnhGzhwoUCgIiOji4wf0REhAAgfv75ZyGEfn2msN+jX3/9VVSpUkW4urqKf//994Xbuq5+WFIPhn3RqFzeOsfGxgoA4vPPPy8w/7Vr1wQAMX78eCFE4etmzJgxAnj+8Ggh5P2NVghRik97IyIiIqIX4kX9RERERDKrlNeQVSRPnz594a271tbWMDY2fkUlkldaWprG3Vy6VK9eHUql8hWViIojJSWl0FcuKZXKQp/8XtHcvXu30AcSGxsbl9qDOyv7unj06NEL78Qr7SfYlzf8XSqmIp/cpDJJ13Vx+T+HDh2Su5ivTGHXRSHfNQBUdr3o2sK81wJVBoVdF4V81+mVtMq+Ll50TRF/RrXxd6l4eA1ZOXfnzh2t52fl16pVq2K/KLe8uXr1qs4HAub1xhtvlNhT0Kl0xMbG4sGDBwVOr1KlCl5//fVXWCJ5HT9+vNBRGisrK7Rq1apUll3Z18WFCxdw+/btQvPI9WT7soq/S8XDgIyIiIhIZpX2GrLc3Fzcvn0b1apV0/tlwpVN3759ce7cOdy9exeWlpbw8vLCrFmzCnxBa0pKCkJDQxEdHY1bt27B1tYW3bt3x9SpU6WXAaekpOCjjz7C+fPnkZKSgurVq8PPzw/Tp0/X+aTtkydPomvXrmjcuDGOHz+uMe327dsICQlBVFQU0tPT8dprr+Gbb77R6zVW27dvx8KFC3HlyhXY2tpi5MiRGDduHIQQePz4MRwdHYv9frJXgf2ZXoR9mSqK8tKX9VVpR8hu3bolPdCS6EVu3ryp8dL2sob9mYqKfZkqirLel/VVaUfI1O+du3nz5ku9+6wsyc7OxoEDB+Dj4wMjIyO5iyO7kmiP1NRUODk5ldh7CktLeenP7KP6K6k2K+99uTL3ncpa94LqXV76sr4qbUCmHgpXqVRl+gdMH9nZ2TAzM4NKpapUG21BSrI9yvqpk/LSn9lH9VfSbVZe+3Jl7juVte4vqndZ78v6qjgnX4mIiIjKKQZkRERERDKrtKcsqWJzmRwJE6XAvLZA0xn7kZnz4qHta3P8XkHJiIqnqP0YYF+msstlcmSR86r34ZUFR8iIiIiIZMaAjIiIiEhmDMiIiIiIZMaAjIiIiEhmDMiIiIiIZMaAjIiIiEhmfOwFERGVG3z8B1VUHCEjIiIikhkDMiIiIiKZvVRANmfOHCgUCgQFBUlpGRkZCAgIgI2NDczNzdG7d28kJSVpfO/GjRvw8/ODmZkZ7OzsMGHCBDx79kwjz+HDh9GyZUuYmJigbt26iIiI0Fp+WFgYXFxcYGpqCg8PD5w+ffplqkNEREQki2IHZL/99hu+/fZbNG/eXCN9/Pjx2LVrF7Zu3YojR47g9u3b6NWrlzQ9JycHfn5+yMrKwokTJ7BmzRpERERg+vTpUp6EhAT4+fmhU6dOiIuLQ1BQED766CPs379fyrN582YEBwcjJCQEZ86cgZubG3x9fZGcnFzcKhERERHJolgBWVpaGj788EN8//33sLKyktIfPXqEH374AYsWLcJbb72FVq1aITw8HCdOnMDJkycBAAcOHMCFCxewfv16uLu7o2vXrpg9ezbCwsKQlZUFAFi5ciVcXV2xcOFCNGrUCIGBgejTpw8WL14sLWvRokUYMWIEhg4disaNG2PlypUwMzPD6tWrdZY5MzMTqampGh8AyM7OrlCfilin4nxMlAImBgIAYGIgnv9fyOfJqS1QKBQYO3asNI/Hjx9j/PjxAABHR0eO9hIRUakp1l2WAQEB8PPzg7e3N7744gspPTY2FtnZ2fD29pbSGjZsiNq1ayMmJgbt2rVDTEwMmjVrBnt7eymPr68vRo8ejfj4eLRo0QIxMTEa81DnUZ8azcrKQmxsLKZMmSJNNzAwgLe3N2JiYnSWOTQ0FDNnztRKP3DgAMzMzIrTDGVWVFSU3EWQXd4X0s5unVto3r///hvzL+yDi4sLEhISsGfPHgDPDwx+++03AEBkZCQmT56MXr164fjx4wD+G+11cHDAiRMncOfOHQwePBhGRkb46quvAPw32jtq1Chs2LAB0dHR+Oijj1CjRg34+voC+G+0d+XKlfDw8MCSJUvg6+uLy5cvw87OrqSbhoiIyiC9A7JNmzbhzJkz0g9VXomJiTA2NoalpaVGur29PRITE6U8eYMx9XT1tMLypKam4unTp3jw4AFycnJ05rl06ZLOck+ZMgXBwcHS/6mpqXBycoKPjw9UKlURal72ZWdnIyoqCl26dIGRkZHcxZFV0xn7YWIgMLt1Lj7/3QCZubpvk8/NeorrqxfDzncMav8bBVdXV3Tr1g2PHj3C+++/j2+//RbDhg1DixYtEB4ejkaNGuHkyZNo166dNNr7yy+/wN7eHu7u7pg9ezYmTZqEGTNmwNjYWGO0FwAaNWqEY8eOYfHixVJAlne0F3geCEZGRmL16tWYPHnyq2kwIiKSlV4B2c2bNzFu3DhERUXB1NS0tMpUKkxMTGBiYqKVbmRkVOGCl4pYJ33lfU5RZq6iwOcW3du3EqavtYFh7RZQ3P4FBgYGMDIywp9//ons7Gx07txZyltWRnuB56fgMzMzpf/zn4Ivq/KeVqeiUbeV+hR8fikntuLx5RPIuv8vDAyNYVqrIc4PdEaDBg2kPBkZGRqn3319ffHNN99o9N0bN25g9OjROHToEMzNzeHv74/Q0FAYGv73M3H48GEEBwcjPj4eTk5OmDZtGoYMGaJRnrCwMMyfPx+JiYlwc3PDsmXL0LZtWxBR4fQKyGJjY5GcnIyWLVtKaTk5OTh69CiWL1+O/fv3IysrCw8fPtQYJUtKSoKDgwMAwMHBQev6GPV1OXnz5L9WJykpCSqVClWqVIFSqYRSqdSZRz0Pohd5cuEIshL/QQ3/xVrTyvJoL1D+T8HztLr+Cjr1PnPvObzRpyvq1auHnJwcrF+/Hm+99RaWLVsmHTjz9DtR2adXQNa5c2ecO3dOI23o0KFo2LAhJk2aBCcnJxgZGSE6Ohq9e/cGAFy+fBk3btyAp6cnAMDT0xNffvklkpOTpQ00KioKKpUKjRs3lvKor+NRi4qKkuZhbGyMVq1aITo6Gj179gQA5ObmIjo6GoGBgXo2AVVGz1LvIiX6e9j3nQ2FobHcxdFbeT0Fz9Pq+lO3WYGn3rvOwn4A+58fA+DZG+Nxd+lAVK9eHW+++SZPvxOVE3oFZNWqVUPTpk010qpWrQobGxspffjw4QgODoa1tTVUKhXGjBkDT09PtGvXDgDg4+ODxo0bY9CgQZg3bx4SExMxbdo0BAQESKcUR40aheXLl2PixIkYNmwYDh48iC1btiAyMlJabnBwMPz9/dG6dWu0bdsWS5YswZMnT6QdAVFhshKvIDf9Ie5EjJPSrotcnaO9eZWV0d7yfgq+vJSzLCns1Hte2U/TAQB2dnYV6vT7i07d6myLCnJqvCKd6jdRFn39qdd1/npXhHbQpcTfZbl48WIYGBigd+/eyMzMlK5VUFMqldi9ezdGjx4NT09PVK1aFf7+/pg1a5aUx9XVFZGRkRg/fjyWLl2KWrVqYdWqVdJRGAD07dsXd+/exfTp05GYmAh3d3fs27dP69QPkS6mzm6oMWy5RlrNPyO0RnuPHDkiTedoL5V1QuTiQfT3eP3116WD5Ip2+v1Fd03nlX/bK+8qwqn+ecW4nDB/vdPT00uoNGXLSwdkhw8f1vjf1NQUYWFhCAsLK/A7zs7OL9xQvLy8cPbs2ULzBAYG8keLisXAxAzG1V000nSN9k6dOhUAcPbsWUyZMoWjvVSmpRxYgay717HpcKzcRSmyop5+f+GpWx3Oz/B9caZyoCKd6m86Y/+LM/1/6jvl89dbPYpa0ZT4CBlRRbF48WI8e/YMq1atQrdu3TjaS2VaStQKPP3nN9gPmINatWpJ6Q4ODhXq9HtRT92q51GRVIRT/UVdd3nlr3d5b4OCMCAj+v90jfYuXLgQq1atwp07d3ReLM/RXpKbEAIPflmJ9L9iYN8/FEaWmsFPq1atePqdqBx4qZeLExGRvFKiViAt/jBse0yAgbEZctIeIDExEU+fPgUAWFhYaJ1+Hzp0aIGn3//44w/s379f5+n3q1evYuLEibh06RK++eYbbNmyRXq+GfD89Pv333+PNWvW4OLFixg9ejRPvxMVEUfIiIjKsbSzz0etkn787+7GGmFAeHi49NBWnn4nKvsYkBERlWPOk3ZrpV2b46fxP0+/E5V9PGVJREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQyY0BGREREJDMGZEREREQy0ysgCw0NRZs2bVCtWjXY2dmhZ8+euHz5skaejIwMBAQEwMbGBubm5ujduzeSkpI08ty4cQN+fn4wMzODnZ0dJkyYgGfPnmnkOXz4MFq2bAkTExPUrVsXERERWuUJCwuDi4sLTE1N4eHhgdOnT+tTHSIiIqIyQa+A7MiRIwgICMDJkycRFRWF7Oxs+Pj44MmTJ1Ke8ePHY9euXdi6dSuOHDmC27dvo1evXtL0nJwc+Pn5ISsrCydOnMCaNWsQERGB6dOnS3kSEhLg5+eHTp06IS4uDkFBQfjoo4+wf/9+Kc/mzZsRHByMkJAQnDlzBm5ubvD19UVycvLLtAdVEo9ituDOmvG4sfh93Fz2IZK3f6Hz4OLTTz8FADg6OvLggoiISo1eAdm+ffswZMgQNGnSBG5uboiIiMCNGzcQGxsLAHj06BF++OEHLFq0CG+99RZatWqF8PBwnDhxAidPngQAHDhwABcuXMD69evh7u6Orl27Yvbs2QgLC0NWVhYAYOXKlXB1dcXChQvRqFEjBAYGok+fPli8eLFUlkWLFmHEiBEYOnQoGjdujJUrV8LMzAyrV68uqbahCizj5nlUa+kHh4ELYN93NpDzTOfBxb59+wAAkZGRPLggIqJS81LXkD169AgAYG1tDQCIjY1FdnY2vL29pTwNGzZE7dq1ERMTAwCIiYlBs2bNYG9vL+Xx9fVFamoq4uPjpTx556HOo55HVlYWYmNjNfIYGBjA29tbypNfZmYmUlNTNT4AkJ2dXaE+FbFOxfmYKAVMDAQAwMRAPP8/z6d2/5mwce+Mag61Ua2GK2r0CMKNGzdw6tQpZGdn4969e/jhhx8wa9YsAECLFi14cEFlVsbN80jeNhO3wgbj+tzu2Llzp8Z0IQS+/PJLAIC9vT28vb3x999/a+RJSUnBhx9+CJVKBUtLSwwfPhxpaWkaef7880+8+eabMDU1hZOTE+bNm6dVlq1bt6Jhw4YwNTVFs2bNsGfPnpKtLFEFZVjcL+bm5iIoKAivv/46mjZtCgBITEyEsbExLC0tNfLa29sjMTFRypM3GFNPV08rLE9qaiqePn2KBw8eICcnR2eeS5cu6SxvaGgoZs6cqZV+4MABmJmZFbHW5UNUVJTcRZDdvLb//T27de4L89+58xijAZw/fx6PHz/Gn3/+iezsbOTk5Eh58h5ctGvXrsCDi9GjRyM+Ph4tWrQo8OAiKCgIwH8HF1OmTJGmv+jgAnh+gJGZmSn9n/8Ao6zKe9BARaNuK/UBhi7Pcp6iir0rLN274M5PX+HZs2cabTx//nysXLkSABAdHY25c+fC19cXFy5cgKmpKQDgww8/xJ07d6TLUYYOHYqRI0di48aNAJ73MR8fH3h7e2PlypU4d+4chg0bBktLS4wcORIAcOLECfTv3x+hoaHo3r07Nm7ciJ49e+LMmTPS7wQR6VbsgCwgIADnz5/HsWPHSrI8pWbKlCkIDg6W/k9NTYWTkxN8fHygUqlkLFnJyc7ORlRUFLp06QIjIyO5iyOrpjP2w8RAYHbrXHz+uwEycxUF5hUiF7e3/oD27dtj9OjRAJ6P/hobG+O9997DiBEjpLxl4eACKP8HGDxo0F+hBxZtWwBoAQDo+dPzsxXqfYAQAgsWLJACpKZNm2Lt2rWwt7fHzp070a9fP1y8eBH79u3Db7/9htatWwMAli1bhm7dumHBggVwdHTEhg0bkJWVhdWrV8PY2BhNmjRBXFwcFi1aJAVkS5cuxdtvv40JEyY8L/Ps2YiKisLy5culgJCIdCtWQBYYGIjdu3fj6NGjqFWrlpTu4OCArKwsPHz4UGOULCkpCQ4ODlKe/Bcsqy+Uzpsn/8XTSUlJUKlUqFKlCpRKJZRKpc486nnkZ2JiAhMTE610IyOjChe8VMQ66Ssz578ALDNXofF/fvf3r0RG8g1sPvTfj5ih4fNNo6y2Y3k9wOBBg/7UbfaiA4u8WrVqhW7dugEArl69igcPHmDEiBHSaJeFhQU8PDwQExODfv36ISYmBpaWllIwBgDe3t4wMDDAqVOn8N577yEmJgYdOnSAsbGxlMfX1xdz587FgwcPYGVlhZiYGI1+qc6T/xRqXkUd7S3KSGF+FWUktiKNLJsoi77+1Os6f70rQjvooldAJoTAmDFjsGPHDhw+fBiurq4a01u1agUjIyNER0ejd+/eAIDLly/jxo0b8PT0BAB4enriyy+/RHJyMuzs7AA8P1pWqVRo3LixlCf/dQdRUVHSPIyNjdGqVStER0ejZ8+eAJ6fQo2OjkZgYKCeTUCVWUrUCjz95zfYD5hT4MFFXmXh4AIo/wcY5aWcZcmLDizyMjQ0lNr3/v37AJ7fKZxX/tFe9f447zysra018uTf5+cdEbaysipwRFg9D130He0tyiUIahXt+rWKMLKc93KSospf7/T09BIqTdmiV0AWEBCAjRs34ueff0a1atWkjczCwgJVqlSBhYUFhg8fjuDgYFhbW0OlUmHMmDHw9PREu3btAAA+Pj5o3LgxBg0ahHnz5iExMRHTpk1DQECA9AMzatQoLF++HBMnTsSwYcNw8OBBbNmyBZGRkVJZgoOD4e/vj9atW6Nt27ZYsmQJnjx5gqFDh5ZU21AFJoTAg19WIv2vGNj3D4WRpWbwoz64OHLkiJTGgwuiklfU0d7ijBSen+Fb4uWVQ0UaWW46Y/+LM/1/6stO8tdbPYpa0egVkK1YsQIA4OXlpZEeHh6OIUOGAAAWL14MAwMD9O7dG5mZmfD19cU333wj5VUqldi9ezdGjx4NT09PVK1aFf7+/tLdbADg6uqKyMhIjB8/HkuXLkWtWrWwatUq+Pr+t3H17dsXd+/exfTp05GYmAh3d3fs27dP6+iMSJeUqBV4cuEI7HpNg4GxGXLSHiAxMVHr4GLq1KkAgLNnz2LKlCk8uKByRz3Smv8xKklJSXB3d5fy5J/+7NkzpKSkvHC0N+8yCspTkqO9+owUlvfgJb+KMLJc1HWXV/56l/c2KIjepyxfxNTUFGFhYQgLCyswj7Oz8wuHkr28vHD27NlC8wQGBnIUgYol7ezz/pf04393N9YI0z64ePbsGVatWoVu3brx4ILKJVdXVzg4OGiM9qampuLUqVPSTSyenp54+PAhYmNj0apVKwDAwYMHkZubCw8PDynP1KlTkZ2dLf0gRkVFoUGDBrCyspLyREdHS3cRq/OoR4SJqGDFvsuSqDxznrRbK+3aHD+N/01NTbFw4UKsWrUKd+7c0XmxPA8uqCzIzXqKZw/uSP8nJCQgLi4O1tbWqF27NoKCghAaGgoAiI+Px9y5c+Ho6CidJm/UqBHefvttjBgxAitXrkR2djYCAwPRr18/6dqzAQMGYObMmRg+fDgmTZqE8+fPY+nSpRrP1Bs3bhw6duyIhQsXws/PD5s2bcLvv/+O77777tU1BlE5xZeLExGVc1mJf+NOxFjciRgL4Plp8BYtWkhvjZg4cSI+/vhjAECnTp2QlpaGffv2Sc8gA4ANGzagYcOG6Ny5M7p164Y33nhDI5CysLDAgQMHkJCQgFatWuHTTz/F9OnTpUdeAED79u2xceNGfPfdd3Bzc8O2bduwc+dOPoOMqAg4QkZEVM6Z1m6uMeqbf7RXoVBg6tSpmDdvHpKTk3WO9lpbW0uPxShI8+bN8euvvxaa5/3338f777+vR+mJCOAIGREREZHsGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyYwBGREREZHMGJARERERyazcB2RhYWFwcXGBqakpPDw8cPr0abmLRFQs7MtUUbAvE+mvXAdkmzdvRnBwMEJCQnDmzBm4ubnB19cXycnJcheNSC/sy1RRsC8TFY+h3AV4GYsWLcKIESMwdOhQAMDKlSsRGRmJ1atXY/LkyTKXrvJwmRypV/5rc/xKqSTlF/syVRTsy0TFU24DsqysLMTGxmLKlClSmoGBAby9vRETE6OVPzMzE5mZmdL/jx49AgCkpKQgOztbK79HaLRe5Tk1pbNe+UtDdnY20tPTcf/+fRgZGb2y5Ro+e6JX/vv375dSSf5j+OwJDHMF0tNzYZhtgJxcRbHK9fjxYwCAEKLEy6imb18G9O/PZYVcfbQ8U7dZUfsxUDH7ckm1Q3lUkbYbfX4v1Pvw/PV+FX1ZDuU2ILt37x5ycnJgb2+vkW5vb49Lly5p5Q8NDcXMmTO10l1dXUukPLYLS2Q2lcKrbKsBeuQtrFyPHz+GhYXFS5dHF337MlD6/ZnKN/bl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7hxq1KhRWsUsEyrKOi+QjDcUVAjFucty2LBhAoBo06aNdMvykiVLBACxYsUKsXXrVtGhQwfRs2dPsXXrVvHFF18IAMLQ0FBs27ZN3LlzR3h6eooGDRpoPApg+/btwsjISKxcuVLUqVNHGBsbCwMDA/Hrr78KIf67y/Lvv/8WCoVC7N27V6vM//vf/8T3338vzp07J/7++2/xzTffCDMzMzF9+vQX1ktN112W9evXF1ZWViI1NVUr/+jRo4WJiYlUf3WbDBs2TBgZGYn09HQxaNAgMXnyZOk7w4cPFwBEUFCQVhuq7yRTt8enn34qAIgePXoIpVIptUdWVpaoW7euePPNN8WpU6fElStXxIIFC4RCoRCRkZHSst5++23RokULcerUKXHs2DFRr169MvW4gNIwevRoYWFhIQ4fPqxxa316erqUJ/86mTNnjjA2Npb6qPqjq49+99134u+//5ZuW1evE7WX7aNykKvNKko/3rRpkzAxMRERERHiwoULYuTIkcLS0lJ6nEP+tjt+/LgwNDQUCxYsEBcvXhQhISHl+rEX+tR95syZYv/+/eKff/4RsbGxol+/fsLU1FTEx8fLVYViefz4sTh79qw4e/asACAWLVokzp49K65fvy6EEGLy5Mli0KBBUn71Yy8mTJggLl68KMLCwvjYC/pPcQIyADo/1atXl/J07NhR+Pv7CyGEyMjIEAqFQud31I99UPv++++FhYWFACDs7OzEzp07pWnqgGzKlCnCyclJ5OTkaJV57969wt3dXZibm4uqVasKNzc3sXLlSo28xQnI1q9fLwCIAQMGaD2HrKD2GDNmjAAgFi9erNEeOTk50jPHdH3y3tr/ww8/iLp16wqFQiEMDQ3Fli1bNJb9119/iV69egk7OzthZmYmmjdvrvX4gPv374v+/fsLc3NzoVKpxNChQzV+MCuigto2PDxcypN3nQjxvH8VpY+q14mpqalwc3PT6KNqL9tH5SBnm1WUfrxs2TJRu3ZtYWxsLNq2bStOnjwpTcvfdkIIsWXLFlG/fn1hbGwsmjRpohGAljf61D0oKEjKa29vL7p166bxzLny4tChQzr7v7qu/v7+omPHjlrfcXd3F8bGxuK1117T2L7KOwZkL6k4AZkQQvz777/C2NhY9O3bV/z777/CwMBABAUFFbic3r17CxsbG5GVlSWEeL6B1qpVS6xbt06sW7dOfPvtt2LChAmiTp06AoDo16+fyM7O1piHs7OzcHd3l76T96PPM52KE5AJIcS4ceOk54vNnz9frFq1SnzyySfC1NRU1KxZU1y6dEkjf05OjvDx8REARP/+/cWyZcvE3Llzxeuvvy4AiC+++EIjf3h4uFZAprZ161ZpBI6IiKis4UX9MnF0dMSAAQOwbt06tGnTBrm5uejRo0eB+Xv06IGffvoJe/fuxTvvvAMAuHXrFgYNGgTg+Z2bNWrUgKenJ1asWCG90im/uLg46Tt5OTs7o2fPni9fsUIsWbIEnTp1QlhYGL766iukp6fDyckJAQEBmDx5MmxtbTXyGxgY4H//+59099n27dthaGiIZs2aYf369fjwww+LvOxevXqhTp06WLBgAUaMGAGlUlnS1SMiIio2hRBl7GmKRERERJUM77IkIiIikhlPWZIkKysLKSkpheaxsLCoEM97ISIiKksYkJHkxIkT6NSpU6F5wsPDMWTIkFdTICIiokqC15CR5MGDBxoPjtSlSZMmFf7hg0RERK8aAzIiIiIimfGifirTjh49ih49esDR0REKhQI7d+7U6/sZGRkYMmQImjVrBkNDwwIf7XH48GG0bNkSJiYmqFu3LiIiIl667ER5sS8TUWEq7TVkubm5uH37NqpVqwaFQiF3cagAd+/eRcOGDdGvXz8MHDgQ6enpSE1NLfL3nzx5AqVSiREjRuB///sfsrOztb5/7do1dOvWDcOGDcO3336Lw4cPY/jw4VCpVOjcuTMeP34MR0dHrXcFEunjyZMncHNzw7Bhw9CrVy+9v5+Tk4MqVapg7Nix+Omnn3TmSUhIgJ+fH0aNGoUNGzYgOjoaH330EWrUqAFfX9+XrQIRlaJKe8ry1q1bcHJykrsYVE7cvHkTtWrVkrsYVEEoFArs2LFDY5QrMzMTU6dOxY8//oiHDx+iadOmmDt3Lry8vLS+P2TIEDx8+FBrlG3SpEmIjIzE+fPnpbR+/frh4cOH2LdvXynVhohKQqUdIatWrRqA5z+0KpVKY1p2djYOHDgAHx8fGBkZyVE8WVTWegMF1z01NRVOTk5SfyEqLYGBgbhw4QI2bdoER0dH7NixA2+//TbOnTuHevXqFWkeMTEx8Pb21kjz9fVFUFBQKZSYiEpSpQ3I1KcpVSqVzoDMzMwMKpWqUgUmlbXewIvrztPaVJpu3LiB8PBw3LhxA46OjgCAzz77DPv27UN4eDi++uqrIs0nMTER9vb2Gmn29vZITU3F06dP+QxBojKs0gZkRERlxblz55CTk4P69etrpGdmZsLGxkamUhHRq8SAjIhIZmlpaVAqlYiNjdV68b25uXmR5+Pg4ICkpCSNtKSkJKhUKo6OEZVxDMioQnKZHKlXfhOlwLy2pVQYohdo0aIFcnJykJycjDfffLPY8/H09MSePXs00qKiouDp6fmyRSSiUsaAjIjoFUhLS8OVK1ek/xMSEhAXFwdra2vUr18fH374IQYPHoyFCxeiRYsWuHv3LqKjo9G8eXP4+fkBAC5cuCC9c/bx48eIi4sDALi7uwMARo0aheXLl2PixIkYNmwYDh48iC1btiAyUr8DFCJ69RiQERG9Ar///rvGu2KDg4MBAP7+/oiIiEB4eDi++OILfPrpp/j3339ha2uLdu3aoXv37tJ3unXrhuvXr0v/t2jRAgCgfnqRq6srIiMjMX78eCxduhS1atXCqlWr+AwyonKAARkR0Svg5eWFwh77aGRkhJkzZ2LmzJkF5rl27VqRlnP27NniFJGIZMRHjxMRERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcwYkBERERHJjAEZERERkcz0CshCQ0PRpk0bVKtWDXZ2dujZsycuX76skScjIwMBAQGwsbGBubk5evfujaSkJI08N27cgJ+fH8zMzGBnZ4cJEybg2bNnGnkOHz6Mli1bwsTEBHXr1kVERIRWecLCwuDi4gJTU1N4eHjg9OnT+lSHiIiIqEzQKyA7cuQIAgICcPLkSURFRSE7Oxs+Pj548uSJlGf8+PHYtWsXtm7diiNHjuD27dvo1auXND0nJwd+fn7IysrCiRMnsGbNGkRERGD69OlSnoSEBPj5+aFTp06Ii4tDUFAQPvroI+zfv1/Ks3nzZgQHByMkJARnzpyBm5sbfH19kZyc/DLtQURERPTKKYQQorhfvnv3Luzs7HDkyBF06NABjx49QvXq1bFx40b06dMHAHDp0iU0atQIMTExaNeuHfbu3Yvu3bvj9u3bsLe3BwCsXLkSkyZNwt27d2FsbIxJkyYhMjIS58+fl5bVr18/PHz4EPv27QMAeHh4oE2bNli+fDkAIDc3F05OThgzZgwmT578wrKnpqbCwsICjx49gkql0piWnZ2NPXv2oFu3bjAyMipu85Q7FaneLpMj9cpvohSY1zZHq+6F9RMiIqKSYvgyX3706BEAwNraGgAQGxuL7OxseHt7S3kaNmyI2rVrSwFZTEwMmjVrJgVjAODr64vRo0cjPj4eLVq0QExMjMY81HmCgoIAAFlZWYiNjcWUKVOk6QYGBvD29kZMTIzOsmZmZiIzM1P6PzU1FcDzICQ7O1sjr/r//OkVXUWqt4lSv+MME4Pn+QvqC0RERKWp2AFZbm4ugoKC8Prrr6Np06YAgMTERBgbG8PS0lIjr729PRITE6U8eYMx9XT1tMLypKam4unTp3jw4AFycnJ05rl06ZLO8oaGhmLmzJla6QcOHICZmZnO70RFRelMr+gqQr3ntS3e9/LXPT09vQRKQ0REVLhiB2QBAQE4f/48jh07VpLlKTVTpkxBcHCw9H9qaiqcnJzg4+Oj85RlVFQUunTpUu5P3emjItW76Yz9L86Uh4mBwOzWuVp1V4+kEhERlaZiBWSBgYHYvXs3jh49ilq1aknpDg4OyMrKwsOHDzVGyZKSkuDg4CDlyX83pPouzLx58t+ZmZSUBJVKhSpVqkCpVEKpVOrMo55HfiYmJjAxMdFKNzIyKjD4KGxaRVYR6p2ZoyjW9/LXvby3AxERlQ96BWRCCIwZMwY7duzA4cOH4erqqjG9VatWMDIyQnR0NHr37g0AuHz5Mm7cuAFPT08AgKenJ7788kskJyfDzs4OwPPTRCqVCo0bN5by7NmzR2PeUVFR0jyMjY3RqlUrREdHo2fPngCen0KNjo5GYGCgnk1QsKYz9hf5h/3aHL8SWy4RERFVLnoFZAEBAdi4cSN+/vlnVKtWTbrmy8LCAlWqVIGFhQWGDx+O4OBgWFtbQ6VSYcyYMfD09ES7du0AAD4+PmjcuDEGDRqEefPmITExEdOmTUNAQIA0gjVq1CgsX74cEydOxLBhw3Dw4EFs2bIFkZH/3TkXHBwMf39/tG7dGm3btsWSJUvw5MkTDB06tKTahoiIiOiV0CsgW7FiBQDAy8tLIz08PBxDhgwBACxevBgGBgbo3bs3MjMz4evri2+++UbKq1QqsXv3bowePRqenp6oWrUq/P39MWvWLCmPq6srIiMjMX78eCxduhS1atXCqlWr4OvrK+Xp27cv7t69i+nTpyMxMRHu7u7Yt2+f1oX+RERERGWd3qcsX8TU1BRhYWEICwsrMI+zs7PWKcn8vLy8cPbs2ULzBAYGlugpSiIiIiI58F2WRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQkMwZkRERERDJjQEZEREQks3IfkIWFhcHFxQWmpqbw8PDA6dOn5S4SERERkV7KdUC2efNmBAcHIyQkBGfOnIGbmxt8fX2RnJwsd9GIiIiIiqxcB2SLFi3CiBEjMHToUDRu3BgrV66EmZkZVq9eLXfRiIiIiIrMUO4CFFdWVhZiY2MxZcoUKc3AwADe3t6IiYnRyp+ZmYnMzEzp/0ePHgEAUlJSkJ2drZE3Ozsb6enpMMw2QE6uokjluX//fnGqUaao633//n0YGRnJXZyXYvjsiX75cwXS03O16v748WMAgBCiRMtHRESUV7kNyO7du4ecnBzY29trpNvb2+PSpUta+UNDQzFz5kytdFdX1xIpj+3CEpkNyWhAIdMeP34MCwuLV1YWIiKqXMptQKavKVOmIDg4WPo/NzcXKSkpsLGxgUKhOQqWmpoKJycn3Lx5EyqV6lUXVTaVtd5AwXUXQuDx48dwdHSUsXRERFTRlduAzNbWFkqlEklJSRrpSUlJcHBw0MpvYmICExMTjTRLS8tCl6FSqSpdYAJU3noDuuvOkTEiIipt5faifmNjY7Rq1QrR0dFSWm5uLqKjo+Hp6SljyYiIiIj0U25HyAAgODgY/v7+aN26Ndq2bYslS5bgyZMnGDp0qNxFIyIiIiqych2Q9e3bF3fv3sX06dORmJgId3d37Nu3T+tCf32ZmJggJCRE6xRnRVdZ6w1U7roTEZH8FIL38xMRERHJqtxeQ0ZERERUUTAgIyIiIpIZAzIiIiIimTEgIyIiIpIZAzIiIiIimVX4gOzo0aPo0aMHHB0doVAosHPnTo3p27dvh4+Pj/QKpbi4uCLNd+vWrWjYsCFMTU3RrFkz7Nmzp+QL/xJKo94RERFQKBQaH1NT09KpwEsorO7Z2dmYNGkSmjVrhqpVq8LR0RGDBw/G7du3XzjfsLAwuLi4wNTUFB4eHjh9+nQp1oKIiCqTCh+QPXnyBG5ubggLCytw+htvvIG5c+cWeZ4nTpxA//79MXz4cJw9exY9e/ZEz549cf78+ZIq9ksrjXoDz18tdOfOHelz/fr1kihuiSqs7unp6Thz5gw+//xznDlzBtu3b8fly5fxzjvvFDrPzZs3Izg4GCEhIThz5gzc3Nzg6+uL5OTk0qoGERFVJqISASB27Nihc1pCQoIAIM6ePfvC+XzwwQfCz89PI83Dw0N8/PHHJVDKkldS9Q4PDxcWFhYlWrbSVljd1U6fPi0AiOvXrxeYp23btiIgIED6PycnRzg6OorQ0NCSKioREVViFX6ErDTExMTA29tbI83X1xcxMTEylejVSUtLg7OzM5ycnPDuu+8iPj5e7iK9tEePHkGhUBT4svmsrCzExsZqrHMDAwN4e3tXinVORESljwFZMSQmJmq9nsne3h6JiYkylejVaNCgAVavXo2ff/4Z69evR25uLtq3b49bt27JXbRiy8jIwKRJk9C/f3+oVCqdee7du4ecnJxKuc6JiOjVKNfvsqRXy9PTE56entL/7du3R6NGjfDtt99i9uzZMpaseLKzs/HBBx9ACIEVK1bIXRwiIqrEGJAVg4ODA5KSkjTSkpKS4ODgIFOJ5GFkZIQWLVrgypUrchdFb+pg7Pr16zh48GCBo2MAYGtrC6VSyXVORESlhqcsi8HT0xPR0dEaaVFRURqjR5VBTk4Ozp07hxo1ashdFL2og7G///4bv/zyC2xsbArNb2xsjFatWmms89zcXERHR1e6dU5ERKWjwo+QpaWlaYzgJCQkIC4uDtbW1qhduzZSUlJw48YN6TlUly9fBvB8FEw9+jF48GDUrFkToaGhAIBx48ahY8eOWLhwIfz8/LBp0yb8/vvv+O67715x7QpWGvWeNWsW2rVrh7p16+Lhw4eYP38+rl+/jo8++ugV165whdW9Ro0a6NOnD86cOYPdu3cjJydHug7M2toaxsbGAIDOnTvjvffeQ2BgIAAgODgY/v7+aN26Ndq2bYslS5bgyZMnGDp06KuvIBERVTxy3+ZZ2g4dOiQAaH38/f2FEM8f5aBrekhIiDSPjh07SvnVtmzZIurXry+MjY1FkyZNRGRk5KurVBGURr2DgoJE7dq1hbGxsbC3txfdunUTZ86cebUVK4LC6q5+zIeuz6FDh6R5ODs7a7SFEEIsW7ZMqn/btm3FyZMnX23FiIiowlIIIcQriPuIiIiIqAC8hoyIiIhIZgzIiIiIiGTGgIyIiIhIZgzIiIiIiGTGgIyIiIhIZgzIiIiIiGTGgIyIiIhIZgzIiIiIiGTGgIyIiIhIZgzIiIiIiGTGgIyIiIhIZv8POwGw69YYxkMAAAAASUVORK5CYII=\n","text/plain":["<Figure size 640x480 with 9 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Anomalies detected using DBSCAN: 65\n","       SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  \\\n","78    BTCUSDT  3234595848  0.843293  0.196890     22680259779   \n","1176  BTCUSDT  3234596954  0.916082  0.120892     22680270915   \n","1191  BTCUSDT  3234596969  0.920092  0.214904     22680270923   \n","2667  BTCUSDT  3234598445  0.997393  0.118630     22680285809   \n","2739  BTCUSDT  3234598517  0.997393  0.118524     22680285809   \n","\n","      SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  \n","78        22680259707                      0          11              -1  \n","1176      22680270864                      0          11              -1  \n","1191      22680264396                      0          11              -1  \n","2667      22680285616                      0          11              -1  \n","2739      22680286560                      1          11              -1  \n","Anomalies detected using LOF: 477\n","       SYMBOL    TRADE_ID    PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","3254  BTCUSDT  3234599032  0.85001  0.011663     22680290790      22680289602   \n","3255  BTCUSDT  3234599033  0.85001  0.011663     22680290827      22680289602   \n","3261  BTCUSDT  3234599039  0.85001  0.011663     22680290854      22680289602   \n","3294  BTCUSDT  3234599072  0.85001  0.011513     22680291377      22680289602   \n","3335  BTCUSDT  3234599113  0.85001  0.012047     22680291910      22680289612   \n","\n","      IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  LOF_Anomaly  \n","3254                      0          11               0           -1  \n","3255                      0          11               0           -1  \n","3261                      0          11               0           -1  \n","3294                      0          11               0           -1  \n","3335                      0          11               0           -1  \n","   RSI  MACD  MACD_Signal\n","0  NaN   NaN          NaN\n","1  NaN   NaN          NaN\n","2  NaN   NaN          NaN\n","3  NaN   NaN          NaN\n","4  NaN   NaN          NaN\n"]}],"source":["import os\n","import pandas as pd\n","import logging\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import DBSCAN\n","from sklearn.neighbors import LocalOutlierFactor\n","import matplotlib.pyplot as plt\n","import ta\n","import pdb\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        return df\n","    except FileNotFoundError:\n","        print(f\"File {file_path} not found.\")\n","        return None\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","\n","def test_load_and_preprocess_data():\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv'\n","    df = load_and_preprocess_data(file_path)\n","    assert df is not None, f\"Failed to load data from {file_path}\"\n","    # Add more assertions as needed, e.g., on the shape or contents of df\n","\n","test_load_and_preprocess_data()\n","\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","print(df.head())  # Print the first few rows of the DataFrame\n","\n","import matplotlib.pyplot as plt\n","\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","df.hist()\n","plt.show()\n","\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        pdb.set_trace()  # Insert a breakpoint\n","        return df\n","    except FileNotFoundError:\n","        print(f\"File {file_path} not found.\")\n","        return None\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[\n","                        logging.FileHandler(\"error.log\"),\n","                        logging.StreamHandler()\n","                    ])\n","logger = logging.getLogger(__name__)\n","\n","def read_csv_from_drive(file_path):\n","    \"\"\"Function to read CSV from Google Drive.\"\"\"\n","    try:\n","        return pd.read_csv(file_path)\n","    except Exception as e:\n","        logger.error(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","def get_signals(df):\n","    \"\"\"Function to detect anomalies, compute technical indicators, and add them to the dataframe.\"\"\"\n","    if 'PRICE' not in df.columns or 'QUANTITY' not in df.columns:\n","        logger.error(\"PRICE or QUANTITY column is missing in the dataframe.\")\n","        return\n","\n","    feature_cols = ['PRICE', 'QUANTITY']\n","\n","    # Normalize the data\n","    try:\n","        scaler = StandardScaler()\n","        data_normalized = scaler.fit_transform(df[feature_cols])\n","    except Exception as e:\n","        logger.error(f\"Error normalizing data. Exception: {e}\")\n","        return\n","\n","    # Anomaly Detection using DBSCAN\n","    try:\n","        dbscan = DBSCAN(eps=0.5, min_samples=5).fit(data_normalized)\n","        df['DBSCAN_Anomaly'] = dbscan.labels_\n","        anomalies_dbscan = df[df['DBSCAN_Anomaly'] == -1]\n","        print(f'Anomalies detected using DBSCAN: {len(anomalies_dbscan)}')\n","        print(anomalies_dbscan.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using DBSCAN. Exception: {e}\")\n","\n","    # Anomaly Detection using LOF\n","    try:\n","        lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)\n","        df['LOF_Anomaly'] = lof.fit_predict(data_normalized)\n","        anomalies_lof = df[df['LOF_Anomaly'] == -1]\n","        print(f'Anomalies detected using LOF: {len(anomalies_lof)}')\n","        print(anomalies_lof.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using LOF. Exception: {e}\")\n","\n","    # Technical Indicators using `ta` library\n","    try:\n","        df['SMA1'] = df['PRICE'].rolling(window=1).mean()\n","        df['SMA100'] = df['PRICE'].rolling(window=100).mean()\n","        df['RSI'] = ta.momentum.RSIIndicator(df['PRICE']).rsi()\n","        macd = ta.trend.MACD(df['PRICE'])\n","        df['MACD'] = macd.macd()\n","        df['MACD_Signal'] = macd.macd_signal()\n","\n","        print(df[['RSI', 'MACD', 'MACD_Signal']].head())\n","    except Exception as e:\n","        logger.error(f\"Error computing technical indicators. Exception: {e}\")\n","\n","    # Save to CSV\n","    try:\n","        path = \"/content/drive/MyDrive/BINANCE/1H/Technical_indicators_simplified_1h.csv\"\n","        df.to_csv(path)\n","        logger.info(f\"Data saved successfully to {path}\")\n","    except Exception as e:\n","        logger.error(f\"Error saving data to {path}. Exception: {e}\")\n","\n","# Assuming Google Drive is already mounted\n","df = read_csv_from_drive('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","\n","# Check if the dataframe is not empty before proceeding\n","if df is not None and not df.empty:\n","    get_signals(df)\n","else:\n","    logger.error(\"DataFrame is empty or None.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":725,"status":"ok","timestamp":1697651884364,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"ekfVYhYaHsuZ","outputId":"f8f32c75-493a-453f-9bad-2b9dbe2e1a87"},"outputs":[{"name":"stdout","output_type":"stream","text":["/bin/bash: line 1: nvidia-smi: command not found\n"]}],"source":["!nvidia-smi"]}],"metadata":{"colab":{"provenance":[{"file_id":"1B85xDD5OTNKj6B8urulfkTV9gGzyizMm","timestamp":1697545301502}],"gpuType":"T4","machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}