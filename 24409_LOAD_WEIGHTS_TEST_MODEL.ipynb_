{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":983,"status":"ok","timestamp":1697805373621,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"j6jHSKzawpVq","outputId":"9611fb74-e001-445f-bd47-abf1496579c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting /content/drive/MyDrive/BINANCE/1H/Technical_indicators_1h.py\n"]}],"source":["%%writefile /content/drive/MyDrive/BINANCE/1H/Technical_indicators_1h.py\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MhufUE6G414y","executionInfo":{"status":"ok","timestamp":1698258266150,"user_tz":-120,"elapsed":30318,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"71203fbd-8d41-4272-b7e1-b8d2c4c20b39"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"_SPfRFdk2uGy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698251162217,"user_tz":-120,"elapsed":6951,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"af358b31-ba87-408a-d2fb-0d3962ed1bc6"},"outputs":[{"output_type":"stream","name":"stdout","text":["/job:localhost/replica:0/task:0/device:GPU:0\n","TensorFlow version: 2.14.0\n","GPU Available: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n"]}],"source":["import tensorflow as tf\n","# ОБОВЯЗКОВО АКТИВУВАТИ\n","# Specify the device for computation\n","with tf.device('/GPU:0'):\n","    # Your TensorFlow operations here\n","    a = tf.constant([1.0, 2.0, 3.0], shape=[3], name='a')\n","    b = tf.constant([1.0, 2.0, 3.0], shape=[3], name='b')\n","    c = tf.add(a, b)\n","\n","# Check the device for the resultant tensor\n","print(c.device)\n","import tensorflow as tf\n","\n","# Check TensorFlow version and GPU availability\n","print(f'TensorFlow version: {tf.__version__}')\n","print(f'GPU Available: {tf.config.list_physical_devices(\"GPU\")}')\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"YwCCPeU693DN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698251194268,"user_tz":-120,"elapsed":7043,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"d0cb9250-8d90-468a-fa74-a1010ba6bdc8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gputil\n","  Downloading GPUtil-1.4.0.tar.gz (5.5 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: gputil\n","  Building wheel for gputil (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gputil: filename=GPUtil-1.4.0-py3-none-any.whl size=7392 sha256=61e6eb7a64c2ade998ad9cbf355069314a2155143f3597cd3bb250b5e05ca12c\n","  Stored in directory: /root/.cache/pip/wheels/a9/8a/bd/81082387151853ab8b6b3ef33426e98f5cbfebc3c397a9d4d0\n","Successfully built gputil\n","Installing collected packages: gputil\n","Successfully installed gputil-1.4.0\n","GPU ID: 0\n","GPU Name: Tesla T4\n","GPU Memory Free: 14740.0MB\n","GPU Memory Used: 361.0MB\n","GPU Memory Total: 15360.0MB\n","------\n","Num GPUs Available:  1\n"]}],"source":["!pip install gputil\n","import GPUtil\n","\n","# Get the list of available GPU devices\n","gpus = GPUtil.getGPUs()\n","\n","# Print detailed GPU information\n","for gpu in gpus:\n","    print(f\"GPU ID: {gpu.id}\")\n","    print(f\"GPU Name: {gpu.name}\")\n","    # print(f\"GPU Driver Version: {gpu.driverVersion}\")  # Remove or comment out this line\n","    print(f\"GPU Memory Free: {gpu.memoryFree}MB\")\n","    print(f\"GPU Memory Used: {gpu.memoryUsed}MB\")\n","    print(f\"GPU Memory Total: {gpu.memoryTotal}MB\")\n","    print(\"------\")\n","import tensorflow as tf\n","print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"TcfM-OMa2uRH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698251202922,"user_tz":-120,"elapsed":602,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"fd283949-6345-46de-978b-1e1d92c6cb1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Wed Oct 25 16:26:42 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 525.105.17   Driver Version: 525.105.17   CUDA Version: 12.0     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   39C    P0    25W /  70W |    361MiB / 15360MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)"]},{"cell_type":"code","source":["!pip install tensorflow\n","import tensorflow as tf\n","print(tf.__version__)\n","\n","!pip install keras\n"],"metadata":{"id":"4ZKXRGK0NKly","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698258293293,"user_tz":-120,"elapsed":18066,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"23d03d1d-bc66-47f2-afcb-f58d6ae885a6"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.14.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.5.26)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (16.0.6)\n","Requirement already satisfied: ml-dtypes==0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: numpy>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.23.5)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.2)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.5.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.34.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.59.0)\n","Requirement already satisfied: tensorboard<2.15,>=2.14 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.14.1)\n","Requirement already satisfied: tensorflow-estimator<2.15,>=2.14.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.14.0)\n","Requirement already satisfied: keras<2.15,>=2.14.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.14.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.41.2)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (3.5)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (0.7.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (3.0.0)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (5.3.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.15,>=2.14->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow) (2023.7.22)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.15,>=2.14->tensorflow) (2.1.3)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.15,>=2.14->tensorflow) (3.2.2)\n","2.14.0\n","Requirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (2.14.0)\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zShBjUe3QyJE","executionInfo":{"status":"ok","timestamp":1698251144535,"user_tz":-120,"elapsed":28357,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"49254259-dfa9-407a-dd4a-95af0f1eec8a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["from numpy.lib.utils import info\n","import pandas as pd\n","import pickle\n","from sklearn.preprocessing import RobustScaler, MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","import time\n","\n","start_time = time.time()\n","\n","\n","# Load and preprocess data\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        df.drop(['TRADE_TIME'], axis=1, inplace=True)\n","        return df\n","    except Exception as e:\n","        print(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","# Load data\n","file_path = '/content/drive/MyDrive/BINANCE/1H/24409_processed_data.csv'\n","df = load_and_preprocess_data(file_path)\n","print(df)\n","\n","# Load the saved scaler for features\n","scaler_path_X = '/content/drive/MyDrive/BINANCE/1H/scaler.pkl'\n","with open(scaler_path_X, 'rb') as f:\n","    loaded_scaler_X = pickle.load(f)\n","\n","# Convert integer columns to int32\n","int_cols = ['TRADE_ID', 'BUYER_ORDER_ID', 'SELLER_ORDER_ID', 'IS_BUYER_MARKET_MAKER', 'TRADE_YEAR', 'TRADE_MONTH', 'TRADE_DAY', 'TRADE_HOUR', 'TRADE_MINUTE', 'TRADE_SECOND']\n","df[int_cols] = df[int_cols].astype('int32')\n","\n","# Convert float columns to float32\n","float_cols = ['PRICE', 'QUANTITY']\n","df[float_cols] = df[float_cols].astype('float32')\n","\n","# Check the data types and memory usage after conversion\n","df.info()\n","\n","# Create 'Date' column using the trade columns\n","df['Date'] = pd.to_datetime(df['TRADE_YEAR'].astype(str) + '-' +\n","                            df['TRADE_MONTH'].astype(str) + '-' +\n","                            df['TRADE_DAY'].astype(str) + ' ' +\n","                            df['TRADE_HOUR'].astype(str) + ':' +\n","                            df['TRADE_MINUTE'].astype(str) + ':' +\n","                            df['TRADE_SECOND'].astype(str))\n","\n","# Split data\n","X = df.drop(['PRICE', 'Date'], axis=1)\n","y = df['PRICE']\n","dates = df['Date']\n","\n","X_train, X_test, y_train, y_test, dates_train, dates_test = train_test_split(X, y, dates, test_size=0.2, random_state=42)\n","\n","# Fit the scaler on the current training data\n","scaler_X = RobustScaler()\n","scaler_X.fit(X_train)\n","\n","# Transform the test data using the newly trained scaler\n","scaled_X_test = scaler_X.transform(X_test)\n","\n","\n","# Reshape the scaled test data for LSTM\n","scaled_X_test = scaled_X_test.reshape(scaled_X_test.shape[0], 1, scaled_X_test.shape[1])\n","\n","# Fit a new MinMaxScaler on y_train\n","scaler_y = MinMaxScaler()\n","scaler_y.fit(y_train.values.reshape(-1, 1))\n","\n","\n","\n","\n","# Load the saved scaler for target\n","scaler_path_y = '/content/drive/MyDrive/BINANCE/1H/scaler_y.pkl'\n","with open(scaler_path_y, 'rb') as f:\n","    loaded_scaler_y = pickle.load(f)\n","\n","# Transform both training and test targets using the loaded scaler for target\n","scaled_y_train = loaded_scaler_y.transform(y_train.values.reshape(-1, 1))\n","scaled_y_test = loaded_scaler_y.transform(y_test.values.reshape(-1, 1))\n","\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n","print(time.time())\n","print(time.time())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2LIgfKeXraXM","executionInfo":{"status":"ok","timestamp":1698267801387,"user_tz":-120,"elapsed":462,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"385002f1-a2fd-4ac6-fb02-5c8bfc20a1f4"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["         TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0      3234644067  0.721423  0.003768     22680782092      22680778995   \n","1      3234644068  0.721423  0.000154     22680782189      22680778995   \n","2      3234644071  0.721337  0.000813     22680781239      22680782237   \n","3      3234644069  0.721423  0.000368     22680782202      22680778995   \n","4      3234644070  0.721337  0.000559     22680781239      22680782203   \n","...           ...       ...       ...             ...              ...   \n","24404  3234668471  0.188388  0.000036     22681050547      22681051873   \n","24405  3234668472  0.187785  0.000033     22681050256      22681051873   \n","24406  3234668473  0.187785  0.000036     22681050413      22681051873   \n","24407  3234668474  0.187268  0.000074     22681049760      22681052069   \n","24408  3234668475  0.187268  0.000232     22681049760      22681052127   \n","\n","       IS_BUYER_MARKET_MAKER  TRADE_YEAR  TRADE_MONTH  TRADE_DAY  TRADE_HOUR  \\\n","0                          0        2023           10         10          12   \n","1                          0        2023           10         10          12   \n","2                          1        2023           10         10          12   \n","3                          0        2023           10         10          12   \n","4                          1        2023           10         10          12   \n","...                      ...         ...          ...        ...         ...   \n","24404                      1        2023           10         10          13   \n","24405                      1        2023           10         10          13   \n","24406                      1        2023           10         10          13   \n","24407                      1        2023           10         10          13   \n","24408                      1        2023           10         10          13   \n","\n","       TRADE_MINUTE  TRADE_SECOND  \n","0                39            39  \n","1                39            40  \n","2                39            41  \n","3                39            41  \n","4                39            41  \n","...             ...           ...  \n","24404             0             0  \n","24405             0             0  \n","24406             0             0  \n","24407             0             0  \n","24408             0             0  \n","\n","[24409 rows x 12 columns]\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 24409 entries, 0 to 24408\n","Data columns (total 12 columns):\n"," #   Column                 Non-Null Count  Dtype  \n","---  ------                 --------------  -----  \n"," 0   TRADE_ID               24409 non-null  int32  \n"," 1   PRICE                  24409 non-null  float32\n"," 2   QUANTITY               24409 non-null  float32\n"," 3   BUYER_ORDER_ID         24409 non-null  int32  \n"," 4   SELLER_ORDER_ID        24409 non-null  int32  \n"," 5   IS_BUYER_MARKET_MAKER  24409 non-null  int32  \n"," 6   TRADE_YEAR             24409 non-null  int32  \n"," 7   TRADE_MONTH            24409 non-null  int32  \n"," 8   TRADE_DAY              24409 non-null  int32  \n"," 9   TRADE_HOUR             24409 non-null  int32  \n"," 10  TRADE_MINUTE           24409 non-null  int32  \n"," 11  TRADE_SECOND           24409 non-null  int32  \n","dtypes: float32(2), int32(10)\n","memory usage: 1.1 MB\n","Time taken: 0 minutes and 0.199950 seconds.\n","1698267800.9712021\n","1698267800.9713008\n"]}]},{"cell_type":"code","source":["# 24409_LOAD_WEIGHTS_TEST_MODEL\n","\n","import time\n","import numpy as np\n","import pandas as pd\n","import os\n","from keras.models import Model, load_model\n","from keras.layers import LSTM, Dense, Dropout, Input, Bidirectional, LeakyReLU\n","from keras.regularizers import l1_l2\n","from keras.optimizers import Adam\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from sklearn.preprocessing import MinMaxScaler, RobustScaler\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","# Start the timer\n","start_time = time.time()\n","\n","# Normalize the features using RobustScaler to handle outliers\n","scaler_X = RobustScaler()\n","scaled_X_train = scaler_X.fit_transform(X_train)\n","scaled_X_test = scaler_X.transform(X_test)\n","\n","# Reshape the scaled data for LSTM\n","scaled_X_train = scaled_X_train.reshape(scaled_X_train.shape[0], 1, scaled_X_train.shape[1])\n","scaled_X_test = scaled_X_test.reshape(scaled_X_test.shape[0], 1, scaled_X_test.shape[1])\n","\n","# Normalize the target\n","scaler_y = MinMaxScaler()\n","scaled_y_train = scaler_y.fit_transform(y_train.values.reshape(-1, 1))\n","scaled_y_test = scaler_y.transform(y_test.values.reshape(-1, 1))\n","\n","# Load the model and weights\n","model = load_model('/content/drive/MyDrive/BINANCE/1H/my_model.h5')\n","model.load_weights('/content/drive/MyDrive/BINANCE/1H/my_weights.h5')\n","\n","# Extract y_test data (both PRICE and QUANTITY) from scaled_X_test\n","y_test_reshaped = scaled_X_test[:, -1, -2:]\n","\n","# Predict using the model\n","y_pred = model.predict(scaled_X_test)\n","\n","# Inverse transform the predictions and the test set to get original values\n","y_pred_original = scaler_y.inverse_transform(y_pred)\n","y_test_original = scaler_y.inverse_transform(y_test_reshaped)\n","\n","# Create a DataFrame for the test results\n","test_results_df = pd.DataFrame({\n","    'Date': dates_test,\n","    'Real Price': y_test_original[:, 0],\n","    'Predicted Price': y_pred_original[:, 0],\n","    'Real Quantity': y_test_original[:, 1],\n","    'Predicted Quantity': y_pred_original[:, 1]\n","})\n","\n","# Display the first few rows of the test results DataFrame\n","print(test_results_df.head())\n","\n","# Save results to CSV in the specified folder\n","save_path = '/content/drive/MyDrive/BINANCE/1H/1model_results.csv'\n","test_results_df.to_csv(save_path, index=False)\n","print(f\"Results saved to {save_path}\")\n","\n","# End the timer and display the execution time\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WXIzVkMxQTzF","executionInfo":{"status":"ok","timestamp":1698267848609,"user_tz":-120,"elapsed":5168,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"bc553b51-1684-44b8-d44d-324669e1f05e"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["153/153 [==============================] - 3s 3ms/step\n","                     Date  Real Price  Predicted Price  Real Quantity  \\\n","14297 2023-10-10 12:53:24    0.222222         0.304479      -0.117647   \n","6896  2023-10-10 12:47:44   -0.444444         0.300666       0.470588   \n","17838 2023-10-10 12:55:42    0.444444         0.309358       0.411765   \n","20889 2023-10-10 12:57:17    0.666667         0.315562      -0.323529   \n","8442  2023-10-10 12:49:07   -0.222222         0.348331      -0.617647   \n","\n","       Predicted Quantity  \n","14297            0.304633  \n","6896             0.300779  \n","17838            0.309566  \n","20889            0.315838  \n","8442             0.348352  \n","Results saved to /content/drive/MyDrive/BINANCE/1H/1model_results.csv\n","Time taken: 0 minutes and 5.215388 seconds.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"lR1JythWSE_w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SiHhPn_uSE61"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"JFuUl1tnSE1s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"jmvGrdiiSEty"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"roYPRCrrSEgS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["save_path = '/content/drive/MyDrive/BINANCE/1H/1model_results.csv' # replace with your desired folder path\n","results_df.to_csv(save_path, index=False)\n","print(f\"Results saved to {save_path}\")\n","\n","\n","import os\n","\n","folder_path = '/content/drive/MyDrive/BINANCE/1H'\n","if not os.path.exists(folder_path):\n","    os.makedirs(folder_path)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ccQRQKZR0NAg","executionInfo":{"status":"ok","timestamp":1698259698763,"user_tz":-120,"elapsed":326,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"3c09d7b5-0c07-463e-c84e-f232f2b8ebc1"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Results saved to /content/drive/MyDrive/BINANCE/1H/1model_results.csv\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"a8iHn3CcIDvf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DwLvT6fAIDf6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Sample data\n","data = {\n","    'EVENT_TIME': ['10.10.23 11:37:37', '10.10.23 11:37:37', '10.10.23 11:37:37', '10.10.23 11:37:37', '10.10.23 11:37:37'],\n","    'TRADE_ID': [3234595905, 3234595906, 3234595907, 3234595908, 3234595909],\n","    'PRICE': [27565.79, 27565.80, 27565.85, 27565.86, 27565.88],\n","    'QUANTITY': [0.00036, 0.00025, 0.00049, 0.00036, 0.00033]\n","}\n","\n","df = pd.DataFrame(data)\n","\n","# Initialize the MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# Fit and transform the PRICE column\n","df['PRICE Scaled'] = scaler.fit_transform(df[['PRICE']])\n","\n","print(\"Original and Scaled Data:\")\n","print(df[['EVENT_TIME', 'PRICE', 'PRICE Scaled']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MzWR9gc_U6o0","executionInfo":{"status":"ok","timestamp":1698258147662,"user_tz":-120,"elapsed":326,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"141c8a9b-4bac-43ad-aea0-031e744c8265"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Original and Scaled Data:\n","          EVENT_TIME     PRICE  PRICE Scaled\n","0  10.10.23 11:37:37  27565.79      0.000000\n","1  10.10.23 11:37:37  27565.80      0.111111\n","2  10.10.23 11:37:37  27565.85      0.666667\n","3  10.10.23 11:37:37  27565.86      0.777778\n","4  10.10.23 11:37:37  27565.88      1.000000\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Sample data\n","data = {\n","    'EVENT_TIME': [''],\n","    'TRADE_ID': [],\n","    'PRICE': [],\n","    'QUANTITY': []\n","}\n","\n","df = pd.DataFrame(data)\n","\n","# Initialize the MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# List of columns to scale\n","columns_to_scale = ['PRICE', 'QUANTITY']\n","\n","# Fit the scaler on the data and transform\n","scaled_data = scaler.fit_transform(df[columns_to_scale])\n","\n","# Convert the scaled data back into a DataFrame and assign column names\n","scaled_df = pd.DataFrame(scaled_data, columns=[f\"{col} Scaled\" for col in columns_to_scale])\n","\n","# Concatenate the original and scaled data\n","result_df = pd.concat([df, scaled_df], axis=1)\n","\n","# Save the resulting DataFrame to a CSV file\n","result_df.to_csv(\"/content/drive/MyDrive/BINANCE/1H/scaled_data.csv\", index=False)\n","\n","\n","\n","print(\"Original and Scaled Data:\")\n","print(result_df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4n9_XzoMy2fa","executionInfo":{"status":"ok","timestamp":1698260749833,"user_tz":-120,"elapsed":337,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"746ccc4b-8640-4871-cd5b-88c1ed12e347"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Original and Scaled Data:\n","          EVENT_TIME    TRADE_ID     PRICE  QUANTITY  PRICE Scaled  \\\n","0  10.10.23 11:37:37  3234595905  27565.79   0.00036      0.000000   \n","1  10.10.23 11:37:37  3234595906  27565.80   0.00025      0.111111   \n","2  10.10.23 11:37:37  3234595907  27565.85   0.00049      0.666667   \n","3  10.10.23 11:37:37  3234595908  27565.86   0.00036      0.777778   \n","4  10.10.23 11:37:37  3234595909  27565.88   0.00033      1.000000   \n","\n","   QUANTITY Scaled  \n","0         0.458333  \n","1         0.000000  \n","2         1.000000  \n","3         0.458333  \n","4         0.333333  \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"sf_ZuWtry2b7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fxQdKSdOy2XY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XCZkgRh9y2TZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZxjTRpHZy2Py"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"qILKDtNXy2L6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"z4eS_HSCy2IY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Z2_7gKS0y2EN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"M9mjJjpdy2Ad"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"-IwZA5kQy18a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"TEs0NXPby15B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"H84gfoB0y11H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XmmP-ndDy1x6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"APHwSYfhy1sx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EM9tKq7qy1pM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"0y_r3bUvy1lS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"IAAUhQ9xy1iD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LltO32BTy1eE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1Lr0A97Jy1Zq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WBjJ9Bw9y1S3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ue1Ad2RWy1Ow"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PEgI1wEfy1JZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#!!!2\n","from sklearn.metrics import mean_squared_error\n","from keras.models import load_model, Model\n","from sklearn.inspection import permutation_importance\n","import os\n","import time\n","import numpy as np\n","import pandas as pd\n","from keras.models import Model\n","from keras.layers import LSTM, Dense, Dropout, Input, Bidirectional, LeakyReLU\n","from keras.regularizers import l1_l2\n","from keras.optimizers import Adam\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from keras import initializers\n","from sklearn.preprocessing import MinMaxScaler\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","\n","start_time = time.time()\n","\n","#\n","# Function to define the LSTM model\n","def define_lstm_model(input_shape):\n","    input_layer = Input(shape=input_shape)\n","    x = Bidirectional(LSTM(75, return_sequences=True, kernel_regularizer=l1_l2(l1=0.006, l2=0.006), kernel_initializer='he_normal'))(input_layer)\n","    x = Dropout(0.3)(x)\n","    x = Bidirectional(LSTM(40, return_sequences=False, kernel_regularizer=l1_l2(l1=0.006, l2=0.006), kernel_initializer='he_normal'))(x)\n","    x = Dropout(0.3)(x)\n","    x = Dense(25)(x)\n","    x = LeakyReLU()(x)\n","    output_layer = Dense(2, activation='linear')(x)  # Predicts both PRICE and QUANTITY\n","\n","    model = Model(inputs=input_layer, outputs=output_layer)\n","    model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')\n","    return model\n","\n","# Ensure required data is loaded\n","assert 'scaled_X_test' in locals(), \"scaled_X_test is not defined\"\n","assert 'y_test' in locals(), \"y_test is not defined\"\n","assert 'dates_test' in locals(), \"dates_test is not defined\"\n","assert 'scaler_y' in locals(), \"scaler_y is not defined\"\n","\n","# Load and define the model\n","model = define_lstm_model((scaled_X_test.shape[1], scaled_X_test.shape[2]))\n","\n","# Check if weights file exists before loading\n","weights_path = '/content/drive/MyDrive/BINANCE/1H/my_weights.h5'\n","if os.path.exists(weights_path):\n","    model.load_weights(weights_path)\n","else:\n","    raise FileNotFoundError(f\"Weights file {weights_path} not found\")\n","\n","\n","# Callbacks\n","early_stopping = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True)\n","reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=7, min_lr=0.0001)\n","\n","\n","# Splitting the last two columns of the last timestep of scaled_X_test to get y_test with both PRICE and QUANTITY\n","y_test_reshaped = scaled_X_test[:, -1, -2:]\n","\n","\n","# Predictions\n","y_pred = model.predict(scaled_X_test)\n","y_pred_original = loaded_scaler.inverse_transform(y_pred)  # Assuming y_pred has shape (9599,2)\n","\n","# Create a DataFrame for test set results\n","test_results_df = pd.DataFrame({\n","    'Date': dates_test,\n","    'Real Price': y_test_original[:, 0],  # Assuming first column is PRICE\n","    'Predicted Price': y_pred_original[:, 0],\n","    'Real Quantity': y_test_original[:, 1],  # Assuming second column is QUANTITY\n","    'Predicted Quantity': y_pred_original[:, 1]\n","})\n","\n","print(test_results_df.head())\n","\n","\n","# Calculate metrics for PRICE\n","mae_price = mean_absolute_error(y_test_original[:, 0], y_pred_original[:, 0])\n","rmse_price = mean_squared_error(y_test_original[:, 0], y_pred_original[:, 0], squared=False)\n","mape_price = np.mean(np.abs((y_test_original[:, 0] - y_pred_original[:, 0]) / y_test_original[:, 0])) * 100\n","\n","print(f\"Mean Absolute Error (Price): {mae_price}\")\n","print(f\"Root Mean Squared Error (Price): {rmse_price}\")\n","print(f\"Mean Absolute Percentage Error (Price): {mape_price}%\")\n","\n","\n","# Visualization of real vs predicted prices\n","plt.figure(figsize=(15, 6))\n","plt.plot(test_results_df['Date'], test_results_df['Real Price'], label='Real Price', color='blue')\n","plt.plot(test_results_df['Date'], test_results_df['Predicted Price'], label='Predicted Price', color='red', linestyle='--')\n","plt.title('Real vs Predicted Prices')\n","plt.xlabel('Date')\n","plt.ylabel('Price')\n","plt.legend()\n","plt.show()\n","\n","# Visualization of loss over epochs\n","plt.plot(history.history['loss'], label='Training Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.legend()\n","plt.title('Loss over epochs')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.show()\n","\n","# Assuming df is defined\n","print(df.memory_usage())\n","df.info()\n","print(df.describe())\n","print(df.columns)\n","\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n","\n","\n","# Feature Importance Analysis\n","def model_evaluation(model, x):\n","    predictions = model.predict(x)\n","    return predictions.squeeze(axis=-1)  # Adjusted this line\n","\n","epsilon = 1e-10\n","mape_price = np.mean(np.abs((y_test_original - y_pred_original[:, 0]) / (y_test_original + epsilon))) * 100\n","\n","y_test_reshaped = y_test.values.reshape(-1, 1)\n","\n","\n","y_test_reshaped = y_test.values.squeeze()\n","\n","\n","result = permutation_importance(model_evaluation, scaled_X_test, y_test_reshaped, n_repeats=30)\n","\n","\n","sorted_idx = result.importances_mean.argsort()\n","\n","plt.barh(range(scaled_X_test.shape[2]), result.importances_mean[sorted_idx])\n","plt.yticks(range(scaled_X_test.shape[2]), X.columns[sorted_idx])\n","plt.xlabel('Permutation Importance')\n","plt.show()\n","\n","# Record and display elapsed time\n","elapsed_time = time.time() - start_time\n","print(f\"Time taken to execute the code: {elapsed_time:.2f} seconds\")\n","\n","# Save results to CSV\n","results_df = pd.DataFrame({\n","    'Date': dates_test,\n","    'Actual Prices': y_test,\n","    'Predicted Prices': y_pred_original[:, 0]\n","})\n","results_df.to_csv('model_results.csv', index=False)\n","print(\"Results saved to model_results.csv\")\n","\n","\n","\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n","print(time.time())\n","print(time.time())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":276},"id":"OlE8SwRWU63Q","executionInfo":{"status":"error","timestamp":1698253233953,"user_tz":-120,"elapsed":2690,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"6211d62b-a6fa-4302-8163-0c8c7be3ae62"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["153/153 [==============================] - 2s 3ms/step\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-a03a146afcee>\u001b[0m in \u001b[0;36m<cell line: 77>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;31m# Predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscaled_X_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m \u001b[0my_pred_original\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloaded_scaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Assuming y_pred has shape (9599,2)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;31m# Directly use y_test_reshaped for inverse transform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'loaded_scaler' is not defined"]}]},{"cell_type":"code","source":["print(type(y_test))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T1v_cxB9U6za","executionInfo":{"status":"ok","timestamp":1698251635616,"user_tz":-120,"elapsed":487,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"cbcc649d-f30c-47d4-ffbe-7a1368bcb221"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.series.Series'>\n"]}]},{"cell_type":"code","source":["y_test_reshaped = y_test.values.squeeze()\n"],"metadata":{"id":"WquwPGW3U6sQ","executionInfo":{"status":"ok","timestamp":1698252517374,"user_tz":-120,"elapsed":846,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"8YgUywTnU6lx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"NrKAJUtyU6hk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"V7Q9wi4MU6eQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"k2HlBOIxU6al"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UP5zevT0U6W0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"N5rgvL-_U6TK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SoIFsErNU6KI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"QKrdq7HGU6Cz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"H2knJ-QRU5_L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"m6E97HiFU57Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1zSbVnFoU53Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZL5q_aE_U5yR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"aBxjjubpU5tu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Nj2s_lh5U5ph"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"pm6e1nd9U5mb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"b2w-jW6JU5g6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FoR9pU24U5ct"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"bRGgu9HkU5Xf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PeahH0nFU5TJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"sFEXIkdSU5O9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"QBm8iwgIU5LX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"G63-pd-9U5Gf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"oYlWt4KIU5C_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vuRUpBhdU490"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"tfnrrnfiU44d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vCOrkySWU40N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7k2EB_SjU4w5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ChnsrlZnU4q5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"3svPTTo-U4n4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2vFAGXlkU4jK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Bm11C_PoU4ft"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Riyi3abLU4ac"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"-JLVrJVmc2z6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FdJ7Bxg7OXYm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1HoMEPgVOXMN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"obx4sFDZdy_R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OzBepDPKdy8C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LlxwBLBPdy5T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7X2LWKqYdy2V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BBxVOhY6dyzW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6dYFIj_Cdywh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DDFaHj-SdytW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BuoJQ8AfdyqS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_ntnEqLedynU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dUGQvgnZdykH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DHr0i633dyhI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Xyz9LHaZdyd4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OEEhof0hdybJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"qrKo1rysdyXc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"5V_i7pK2dyUl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"r49ow9JWdyRp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nPNFBn2odyOz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"K-_wnX94dyLK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Zbl0O1djdyH9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ANGZ5wjEdyEr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SSAEs7QPdx9u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ByPSkkIXdx6e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9moTR33Adx3U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UKc7wHPsdx0A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"e-m4nCuvdxxF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KO1wSncIdxuV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1Gvs1v_xdxrc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ax9CYdffdxoX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"upvki0KRdxll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"E5n67tY3dxiN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"l1f0wLMFdxfF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Kt0NE6WGOW9e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"O0Ti_qlvOW6V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"xbyc4twsOW3W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"O8dxx3CpOW0C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hjfQ2cq-OWxK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KhkhhshtOWtz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"kvYrcBLpOWrN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"omOf0r7VOWoH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"5iYVuC3YOWk2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# model exsemple 7/0  LSTM -WEIGHTS 7\n","\n","import numpy as np\n","import pandas as pd\n","from keras.models import Sequential, Model\n","from keras.layers import LSTM, Dense, Dropout, Input, Bidirectional, LeakyReLU\n","from keras.regularizers import l2, l1, l1_l2\n","from keras.optimizers import Adam\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from keras import initializers\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MinMaxScaler, RobustScaler\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from datetime import datetime as dt\n","import pickle  # Import pickle\n","\n","\n","\n","# Load and preprocess data\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        df.drop(['TRADE_TIME'], axis=1, inplace=True)\n","        return df\n","    except Exception as e:\n","        print(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","# Load data\n","file_path = '/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv'\n","df = load_and_preprocess_data(file_path)\n","print(df)\n","\n","\n","# Assuming you've defined the path to your saved scaler as scaler_path\n","scaler_path = '/content/drive/MyDrive/BINANCE/1H/scaler.pkl'  # Update this path as per your directory structure\n","\n","# Load the saved scaler\n","with open(scaler_path, 'rb') as f:\n","    loaded_scaler = pickle.load(f)\n","\n","# Assuming that after processing, your data resides in df and is named processed_df\n","processed_df = df.copy()  # If you don't have a separate processed_df, you can use df directly\n","\n","\n","# Convert integer columns to int32\n","int_cols = ['TRADE_ID', 'BUYER_ORDER_ID', 'SELLER_ORDER_ID', 'IS_BUYER_MARKET_MAKER', 'TRADE_YEAR', 'TRADE_MONTH', 'TRADE_DAY', 'TRADE_HOUR', 'TRADE_MINUTE', 'TRADE_SECOND']\n","df[int_cols] = df[int_cols].astype('int32')\n","\n","# Convert float columns to float32\n","float_cols = ['PRICE', 'QUANTITY']\n","df[float_cols] = df[float_cols].astype('float32')\n","\n","# Check the data types and memory usage after conversion\n","df.info()\n","\n","\n","# Create a 'Date' column using the trade columns\n","# Convert the trade columns to a single datetime column\n","df['Date'] = pd.to_datetime(df['TRADE_YEAR'].astype(str) + '-' +\n","                            df['TRADE_MONTH'].astype(str) + '-' +\n","                            df['TRADE_DAY'].astype(str) + ' ' +\n","                            df['TRADE_HOUR'].astype(str) + ':' +\n","                            df['TRADE_MINUTE'].astype(str) + ':' +\n","                            df['TRADE_SECOND'].astype(str))\n","\n","\n","# Split data\n","X = df.drop(['PRICE', 'Date'], axis=1)  # Exclude the 'Date' column from features\n","y = df['PRICE']\n","dates = df['Date']  # Extract dates\n","#print(df[['PRICE']].to_string(index=False))\n","\n","\n","X_train, X_test, y_train, y_test, dates_train, dates_test = train_test_split(X, y, dates, test_size=0.2, random_state=42)\n","\n","# Normalize the features using RobustScaler to handle outliers\n","scaler_X = RobustScaler()\n","scaled_X_train = scaler_X.fit_transform(X_train)\n","scaled_X_test = scaler_X.transform(X_test)\n","\n","# Reshape the scaled data for LSTM\n","scaled_X_train = scaled_X_train.reshape(scaled_X_train.shape[0], 1, scaled_X_train.shape[1])\n","scaled_X_test = scaled_X_test.reshape(scaled_X_test.shape[0], 1, scaled_X_test.shape[1])\n","\n","# Normalize the target\n","scaler_y = MinMaxScaler()\n","scaled_y_train = scaler_y.fit_transform(y_train.values.reshape(-1, 1))\n","scaled_y_test = scaler_y.transform(y_test.values.reshape(-1, 1))\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698267987857,"user_tz":-120,"elapsed":1646,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"dbdc3b9c-432a-4268-e3c5-df6f04f7bcdd","id":"8MyF5M-rgZQI"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["         TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0      3234595905  0.857830  0.000058     22680259990      22680258817   \n","1      3234595906  0.857931  0.000040     22680259990      22680258889   \n","2      3234595907  0.858432  0.000080     22680259990      22680259285   \n","3      3234595908  0.858532  0.000058     22680259990      22680258833   \n","4      3234595909  0.858733  0.000053     22680259990      22680258857   \n","...           ...       ...       ...             ...              ...   \n","47986  3234643764  0.074494  0.001283     22680777141      22680777760   \n","47987  3234643765  0.074594  0.000260     22680777779      22680777210   \n","47988  3234643766  0.074594  0.000308     22680777781      22680777210   \n","47989  3234643767  0.074594  0.000283     22680777782      22680777210   \n","47990  3234643768  0.074594  0.000342     22680777793      22680777210   \n","\n","       IS_BUYER_MARKET_MAKER  TRADE_YEAR  TRADE_MONTH  TRADE_DAY  TRADE_HOUR  \\\n","0                          0        2023           10         10          11   \n","1                          0        2023           10         10          11   \n","2                          0        2023           10         10          11   \n","3                          0        2023           10         10          11   \n","4                          0        2023           10         10          11   \n","...                      ...         ...          ...        ...         ...   \n","47986                      1        2023           10         10          12   \n","47987                      0        2023           10         10          12   \n","47988                      0        2023           10         10          12   \n","47989                      0        2023           10         10          12   \n","47990                      0        2023           10         10          12   \n","\n","       TRADE_MINUTE  TRADE_SECOND  \n","0                37            37  \n","1                37            37  \n","2                37            37  \n","3                37            37  \n","4                37            37  \n","...             ...           ...  \n","47986            38            38  \n","47987            38            38  \n","47988            38            38  \n","47989            38            38  \n","47990            38            38  \n","\n","[47991 rows x 12 columns]\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 47991 entries, 0 to 47990\n","Data columns (total 12 columns):\n"," #   Column                 Non-Null Count  Dtype  \n","---  ------                 --------------  -----  \n"," 0   TRADE_ID               47991 non-null  int32  \n"," 1   PRICE                  47991 non-null  float32\n"," 2   QUANTITY               47991 non-null  float32\n"," 3   BUYER_ORDER_ID         47991 non-null  int32  \n"," 4   SELLER_ORDER_ID        47991 non-null  int32  \n"," 5   IS_BUYER_MARKET_MAKER  47991 non-null  int32  \n"," 6   TRADE_YEAR             47991 non-null  int32  \n"," 7   TRADE_MONTH            47991 non-null  int32  \n"," 8   TRADE_DAY              47991 non-null  int32  \n"," 9   TRADE_HOUR             47991 non-null  int32  \n"," 10  TRADE_MINUTE           47991 non-null  int32  \n"," 11  TRADE_SECOND           47991 non-null  int32  \n","dtypes: float32(2), int32(10)\n","memory usage: 2.2 MB\n"]}]},{"cell_type":"code","source":["# model exsemple 7/1 LSTM -WEIGHTS 7\n","import numpy as np\n","import pandas as pd\n","from keras.models import Model\n","from keras.layers import LSTM, Dense, Dropout, Input, Bidirectional, LeakyReLU\n","from keras.regularizers import l1_l2\n","from keras.optimizers import Adam\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from keras import initializers\n","from sklearn.preprocessing import MinMaxScaler\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","\n","\n","\n","# Splitting the last two columns of the last timestep of scaled_X_test to get y_test with both PRICE and QUANTITY\n","y_test_reshaped = scaled_X_test[:, -1, -2:]\n","\n","# Predictions\n","y_pred = model.predict(scaled_X_test)\n","y_pred_original = loaded_scaler.inverse_transform(y_pred)  # Assuming y_pred has shape (9599,2)\n","\n","# Directly use y_test_reshaped for inverse transform\n","y_test_original = loaded_scaler.inverse_transform(y_test_reshaped)\n","\n","# Create a DataFrame for test set results\n","test_results_df = pd.DataFrame({\n","    'Date': dates_test,\n","    'Real Price': y_test_original[:, 0],  # Assuming first column is PRICE\n","    'Predicted Price': y_pred_original[:, 0],\n","    'Real Quantity': y_test_original[:, 1],  # Assuming second column is QUANTITY\n","    'Predicted Quantity': y_pred_original[:, 1]\n","})\n","\n","print(test_results_df.head())\n","\n","\n","# Calculate metrics for PRICE\n","mae_price = mean_absolute_error(y_test_original[:, 0], y_pred_original[:, 0])\n","rmse_price = mean_squared_error(y_test_original[:, 0], y_pred_original[:, 0], squared=False)\n","mape_price = np.mean(np.abs((y_test_original[:, 0] - y_pred_original[:, 0]) / y_test_original[:, 0])) * 100\n","\n","print(f\"Mean Absolute Error (Price): {mae_price}\")\n","print(f\"Root Mean Squared Error (Price): {rmse_price}\")\n","print(f\"Mean Absolute Percentage Error (Price): {mape_price}%\")\n","\n","\n","# Visualization of real vs predicted prices\n","plt.figure(figsize=(15, 6))\n","plt.plot(test_results_df['Date'], test_results_df['Real Price'], label='Real Price', color='blue')\n","plt.plot(test_results_df['Date'], test_results_df['Predicted Price'], label='Predicted Price', color='red', linestyle='--')\n","plt.title('Real vs Predicted Prices')\n","plt.xlabel('Date')\n","plt.ylabel('Price')\n","plt.legend()\n","plt.show()\n","\n","# Visualization of loss over epochs\n","plt.plot(history.history['loss'], label='Training Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.legend()\n","plt.title('Loss over epochs')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.show()\n","\n","# Assuming df is defined\n","print(df.memory_usage())\n","df.info()\n","print(df.describe())\n","print(df.columns)\n"],"metadata":{"id":"geheafEdtGz6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"n_v6r-vDOWhq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LlkodUy_FqN1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"AYrKjPNJFqLM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Z1x89M1rFqIh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"F5JJPr8hFqD-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df.sample(5))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KEVd1TRd2lwV","executionInfo":{"status":"ok","timestamp":1698153800841,"user_tz":-120,"elapsed":509,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"998b61ba-1816-4d81-a064-029daac9df48"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["         TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","22847  3234618660  0.342992  0.000040     22680499413      22680501708   \n","3424   3234599202  0.864949  0.011572     22680291945      22680290995   \n","17465  3234613243  0.235613  0.000082     22680447080      22680448103   \n","36467  3234632245  0.301684  0.000053     22680648831      22680646553   \n","45687  3234641465  0.338480  0.000058     22680750653      22680751283   \n","\n","       IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","22847                      1          12  \n","3424                       0          11  \n","17465                      1          11  \n","36467                      0          12  \n","45687                      1          12  \n"]}]},{"cell_type":"code","source":["print(df.memory_usage())\n"],"metadata":{"id":"5KVrmcwW2lte"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df.groupby('PRICE').mean())\n"],"metadata":{"id":"9e9ljU5J2lom"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.info()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EePboIk53oFx","executionInfo":{"status":"ok","timestamp":1698154060272,"user_tz":-120,"elapsed":662,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"ac79b26f-0bfb-411a-ae95-915ff477c8c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 47991 entries, 0 to 47990\n","Data columns (total 7 columns):\n"," #   Column                 Non-Null Count  Dtype  \n","---  ------                 --------------  -----  \n"," 0   TRADE_ID               47991 non-null  int64  \n"," 1   PRICE                  47991 non-null  float64\n"," 2   QUANTITY               47991 non-null  float64\n"," 3   BUYER_ORDER_ID         47991 non-null  int64  \n"," 4   SELLER_ORDER_ID        47991 non-null  int64  \n"," 5   IS_BUYER_MARKET_MAKER  47991 non-null  int64  \n"," 6   TRADE_HOUR             47991 non-null  int64  \n","dtypes: float64(2), int64(5)\n","memory usage: 2.6 MB\n"]}]},{"cell_type":"code","source":["print(df.describe())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-FTHeDZd3oDi","executionInfo":{"status":"ok","timestamp":1698154089154,"user_tz":-120,"elapsed":17,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"4edfb3bf-03cd-4649-80f3-9b3cda09349d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           TRADE_ID         PRICE      QUANTITY  BUYER_ORDER_ID  \\\n","count  4.799100e+04  47991.000000  47991.000000    4.799100e+04   \n","mean   3.234620e+09      0.442916      0.003938    2.268038e+10   \n","std    1.385395e+04      0.238370      0.017727    8.088109e+05   \n","min    3.234596e+09      0.000000      0.000000    2.267157e+10   \n","25%    3.234608e+09      0.287046      0.000053    2.268037e+10   \n","50%    3.234620e+09      0.378183      0.000127    2.268051e+10   \n","75%    3.234632e+09      0.535492      0.000936    2.268064e+10   \n","max    3.234644e+09      1.000000      1.000000    2.268078e+10   \n","\n","       SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER    TRADE_HOUR  \n","count     4.799100e+04           47991.000000  47991.000000  \n","mean      2.268051e+10               0.518993     11.603321  \n","std       2.056203e+05               0.499644      0.489213  \n","min       2.267266e+10               0.000000     11.000000  \n","25%       2.268038e+10               0.000000     11.000000  \n","50%       2.268051e+10               1.000000     12.000000  \n","75%       2.268064e+10               1.000000     12.000000  \n","max       2.268078e+10               1.000000     12.000000  \n"]}]},{"cell_type":"code","source":["print(df.head())\n","print(df.tail())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vEOdG8h83n8Y","executionInfo":{"status":"ok","timestamp":1698154124184,"user_tz":-120,"elapsed":7,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"c36f4247-9473-45d2-c236-59d1c7a4055b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0  3234595905  0.857830  0.000058     22680259990      22680258817   \n","1  3234595906  0.857931  0.000040     22680259990      22680258889   \n","2  3234595907  0.858432  0.000080     22680259990      22680259285   \n","3  3234595908  0.858532  0.000058     22680259990      22680258833   \n","4  3234595909  0.858733  0.000053     22680259990      22680258857   \n","\n","   IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","0                      0          11  \n","1                      0          11  \n","2                      0          11  \n","3                      0          11  \n","4                      0          11  \n","         TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","47986  3234643764  0.074494  0.001283     22680777141      22680777760   \n","47987  3234643765  0.074594  0.000260     22680777779      22680777210   \n","47988  3234643766  0.074594  0.000308     22680777781      22680777210   \n","47989  3234643767  0.074594  0.000283     22680777782      22680777210   \n","47990  3234643768  0.074594  0.000342     22680777793      22680777210   \n","\n","       IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","47986                      1          12  \n","47987                      0          12  \n","47988                      0          12  \n","47989                      0          12  \n","47990                      0          12  \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"GDOFLCLg3n4Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BhiBoOaj3nzi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df.corr())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RBnBeebQ2llS","executionInfo":{"status":"ok","timestamp":1698153924569,"user_tz":-120,"elapsed":8,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"9c87357d-fc5b-4535-aea5-21c571307686"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                       TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  \\\n","TRADE_ID               1.000000 -0.689619 -0.004201        0.228375   \n","PRICE                 -0.689619  1.000000 -0.030585        0.005972   \n","QUANTITY              -0.004201 -0.030585  1.000000        0.017888   \n","BUYER_ORDER_ID         0.228375  0.005972  0.017888        1.000000   \n","SELLER_ORDER_ID        0.733351 -0.463095 -0.000609        0.248357   \n","IS_BUYER_MARKET_MAKER -0.001064 -0.013328  0.002961       -0.154300   \n","TRADE_HOUR             0.847333 -0.690303 -0.001585        0.200144   \n","\n","                       SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","TRADE_ID                      0.733351              -0.001064    0.847333  \n","PRICE                        -0.463095              -0.013328   -0.690303  \n","QUANTITY                     -0.000609               0.002961   -0.001585  \n","BUYER_ORDER_ID                0.248357              -0.154300    0.200144  \n","SELLER_ORDER_ID               1.000000              -0.019694    0.614419  \n","IS_BUYER_MARKET_MAKER        -0.019694               1.000000   -0.039379  \n","TRADE_HOUR                    0.614419              -0.039379    1.000000  \n"]}]},{"cell_type":"code","source":["df['PRICE'].hist()\n","df.plot(x='TRADE_HOUR', y='QUANTITY', kind='scatter')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":879},"id":"de3vv32T2lgK","executionInfo":{"status":"ok","timestamp":1698154034207,"user_tz":-120,"elapsed":545,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"6998772a-d989-426b-8d1b-e11e71b4c868"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='TRADE_HOUR', ylabel='QUANTITY'>"]},"metadata":{},"execution_count":42},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"96etiDv32lZa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","sns.scatterplot(data=df, x='PRICE', y='QUANTITY')\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"xUlM8Po0netW","executionInfo":{"status":"ok","timestamp":1698154267334,"user_tz":-120,"elapsed":649,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"4241afda-ff8a-440e-fb1c-f795e7d0339f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(df.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"63KvJRrSnekE","executionInfo":{"status":"ok","timestamp":1698154196466,"user_tz":-120,"elapsed":538,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"19a3692c-1b04-4f89-aa4d-818165185292"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['TRADE_ID', 'PRICE', 'QUANTITY', 'BUYER_ORDER_ID', 'SELLER_ORDER_ID',\n","       'IS_BUYER_MARKET_MAKER', 'TRADE_HOUR'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["!pip install seaborn\n"],"metadata":{"id":"zJUuydi5nehY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n"],"metadata":{"id":"RMnyjsaBneem"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.scatter(df['PRICE'], df['QUANTITY'])\n","plt.xlabel('Price')\n","plt.ylabel('Quantity')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"RL3mRXtrneYl","executionInfo":{"status":"ok","timestamp":1698154370650,"user_tz":-120,"elapsed":550,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"8692fe1a-5b0f-4400-8e0d-a609b9865067"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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EREZCoMbIiIiMhQGN0RERGQoDG6IiIjIUBjcEBERkaEwuCEiIiJDYXBDREREhsLghoiIiAxF8+UX1OYsyFxfX69xS4iIiEgs53VbzMIKYRfcNDQ0AADS0tI0bgkRERFJ1dDQAKvV6nObsFtbyuFw4NixY4iNjYXJZFL0uevr65GWloYjR45w3aog4nFWB4+zOnic1cNjrY5gHWdBENDQ0IAePXq4LajtSdj13JjNZlx66aVBfY24uDh+cVTA46wOHmd18Dirh8daHcE4zv56bJyYUExERESGwuCGiIiIDIXBjYKioqKQl5eHqKgorZtiaDzO6uBxVgePs3p4rNWhh+McdgnFREREZGzsuSEiIiJDYXBDREREhsLghoiIiAyFwQ0REREZCoMbiVauXIn09HRER0djxIgRKC4u9rn9P/7xD/Tr1w/R0dHo378/8vPzVWppaJNynFevXo3rrrsO3bp1Q7du3ZCTk+P3faFWUj/PTuvWrYPJZMJtt90W3AYahNTjfPr0acycOROpqamIiopC3759ee4QQepxXr58Oa688kp07twZaWlpmD17NpqamlRqbWj66quvMHHiRPTo0QMmkwkffvih3322bNmCIUOGICoqCn369MEbb7wR9HZCINHWrVsnWCwW4bXXXhP+85//CPfdd58QHx8vVFdXe9x+27ZtQkREhPDss88K5eXlwhNPPCFERkYKP/zwg8otDy1Sj/Ptt98urFy5Uti1a5dQUVEh3HXXXYLVahV++uknlVseWqQeZ6fKykqhZ8+ewnXXXSfceuut6jQ2hEk9zs3NzcI111wjTJgwQdi6datQWVkpbNmyRSgtLVW55aFF6nF+6623hKioKOGtt94SKisrhc8//1xITU0VZs+erXLLQ0t+fr7w+OOPC++//74AQPjggw98bn/gwAEhJiZGyM3NFcrLy4WXXnpJiIiIEAoKCoLaTgY3EgwfPlyYOXOm6/92u13o0aOHsHTpUo/b//a3vxVuvvlmt8dGjBghPPDAA0FtZ6iTepzbu3DhghAbGyu8+eabwWqiIcg5zhcuXBBGjhwpvPrqq8K0adMY3Igg9TivWrVK6NWrl9DS0qJWEw1B6nGeOXOmMGbMGLfHcnNzhVGjRgW1nUYiJrj54x//KFx99dVuj02aNEkYN25cEFsmCByWEqmlpQU7d+5ETk6O6zGz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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"IxnTWCG7neWD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"cq_kIzvEneLM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"xrfi2Or5feRn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"0kJV1ilvvR5k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_xOvNZcfvR2P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"q3aeKcp4vRye"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"sNNPhN65vRvU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WkqUMFU2vRsL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nPocR0IgvRo1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"40jY1D42vRlf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZE2hkS5wvRiU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"mjApwWNgvRe9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"CPIPpoAuvRbs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"pW0qyeIvvRYg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"xQmGzJBzvRU-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"n7YzftNxvRRN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"RiY1rvzqvRNz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"w1Jvsd_yvRCx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# This is in a subsequent cell\n","print(df.head())\n","# Access the DataFrame 'df' and perform operations on it\n","print(df.describe())  # Prints statistical summary of the DataFrame\n","\n","\n","start_time = time.time()\n","\n","#2Constructing LSTM network\n","input_layer = Input(shape=(look_back, 5))\n","x = LSTM(128,return_sequences=True,kernel_regularizer=l2(weight_decay),kernel_initializer=initializers.he_normal(seed=0))(input_layer)\n","x = Dropout(0.5)(x)\n","x = LSTM(32,return_sequences = False,kernel_regularizer=l2(weight_decay),kernel_initializer=initializers.he_normal(seed=0))(x)\n","x = Dropout(0.5)(x)\n","x = Dense(16,activation='relu')(x)\n","output_layer = Dense(1,activation='linear')(x)\n","model = Model(inputs=input_layer, outputs=output_layer)\n","model.compile(optimizer='rmsprop', loss='mean_squared_error')\n","model.summary()\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","model.fit(dataset, epochs=5)\n","\n","\n","\n","print(f'Mean Absolute Error: {mae}')\n","print(f'Root Mean Squared Error: {rmse}')\n","logger.info(f\"Computing technical indicators took {end_time - start_time} seconds\")\n","\n","start_time = time.time()\n","end_time = time.time()\n","time_difference = end_time - start_time\n","minutes = time_difference // 60\n","seconds = time_difference % 60\n","print(f\"Time taken: {int(minutes)} minutes and {seconds:.6f} seconds.\")\n","print(time.time())\n","print(time.time())"],"metadata":{"id":"yJzTOqPp9BFg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 5\n","#Now I wanted to show the loss and validation loss dynamics\n","plt.figure()\n","plt.plot(history['loss'], label='train')\n","plt.plot(history['val_loss'], label='test')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"PxOMK2yIfbOm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"akENKcR1fbGs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"4wA1PM5ufa9D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Rehij2y8e1bX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fz6BRQFye1Yg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_Golm59ee1VY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ifvsSO8Me1R2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LmU3tkwwe1KW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"wSHqhrcGe1Gw"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MJpB1nChOseM"},"outputs":[],"source":["\n","# Access the DataFrame 'df' and perform operations on it\n","print(df.describe())  # Prints statistical summary of the DataFrame\n","\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","path = \"/content/drive/MyDrive/BINANCE/1H/my_dataframe.csv\"  # Change 'my_dataframe.csv' to your preferred file name\n","df.to_csv(path, index=False)  # 'index=False' ensures that the row indices are not saved to the CSV\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PtKBjPfDOsbh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837182669,"user_tz":-120,"elapsed":2881,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"d3543d80-b9f7-4771-bd9e-17e24759fcfc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","source":["# Creating the comparison DataFrame\n","comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n","print(comparison_df.head())\n"],"metadata":{"id":"IdWSr19L9-Ar"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Dngc33EAOsZY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837192957,"user_tz":-120,"elapsed":624,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"7f2356ae-907f-4d20-8724-35ab2861a46d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Results saved to: /content/drive/MyDrive/BINANCE/1H/comparison_results.csv\n"]}],"source":["\n","\n","# Save the comparison_df to Google Drive\n","comparison_df_path = \"/content/drive/MyDrive/BINANCE/1H/comparison_results.csv\"\n","comparison_df.to_csv(comparison_df_path, index=False)\n","print(f\"Results saved to: {comparison_df_path}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YBvBEatBOsSb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837374876,"user_tz":-120,"elapsed":4659,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"a03c29f2-52a6-489b-f8fc-fe7fd88c2d42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SufovZ_vOsMj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697837377590,"user_tz":-120,"elapsed":8,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"095e529e-4e8b-470d-bb64-fc390175978c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Results saved to: /content/drive/MyDrive/BINANCE/1H/prediction_results.csv\n"]}],"source":["# Prediction and Metrics\n","y_pred = grid_search.predict(X_test)\n","mae = mean_absolute_error(y_test, y_pred)\n","rmse = mean_squared_error(y_test, y_pred, squared=False)\n","\n","# Create DataFrame from results\n","results_df = pd.DataFrame({\n","    'Actual': y_test,\n","    'Predicted': y_pred\n","})\n","results_df['MAE'] = mae\n","results_df['RMSE'] = rmse\n","\n","# Save the results DataFrame to Google Drive\n","results_path = \"/content/drive/MyDrive/BINANCE/1H/prediction_results.csv\"\n","results_df.to_csv(results_path, index=False)\n","print(f\"Results saved to: {results_path}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qaTc8rc4OsIt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SAy64XUROq_a"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aWEeMAaJOq8I"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8VqN5AeBOq4w"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoKOdutErv8J"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1dEfY824rv2G"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"efJM3yB-rvzI"},"outputs":[],"source":[]},{"cell_type":"code","source":[],"metadata":{"id":"OAJcC5Qhnfvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"AO2JA46enfsf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XiwZqWS0nfps"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"u66ZDmvvnfmm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UkI3ASPAnfkU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Tgh_p0ObnfhI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"STfWCiDynfdz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"032aadXInfac"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"STf0DC0OnfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KVhK2mOMnfTs"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B0HH1PCarvv2"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V_G_AnEJrvtD"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36363,"status":"ok","timestamp":1697738250519,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"zZtAsLIsrwiB","outputId":"24af1662-38be-4c15-f424-2cfe96453bfb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","    SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0  BTCUSDT  3234595905  0.857830  0.000058     22680259990      22680258817   \n","1  BTCUSDT  3234595906  0.857931  0.000040     22680259990      22680258889   \n","2  BTCUSDT  3234595907  0.858432  0.000080     22680259990      22680259285   \n","3  BTCUSDT  3234595908  0.858532  0.000058     22680259990      22680258833   \n","4  BTCUSDT  3234595909  0.858733  0.000053     22680259990      22680258857   \n","\n","   IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","0                      0          11  \n","1                      0          11  \n","2                      0          11  \n","3                      0          11  \n","4                      0          11  \n","[W] [17:57:25.828843] Batch size limited by the chosen integer type (4 bytes). 47991 -> 44747. Using the larger integer type might result in better performance\n"]},{"name":"stderr","output_type":"stream","text":["ERROR:__main__:Error detecting anomalies using LOF. Exception: module cuml has no attribute LocalOutlierFactor\n"]},{"name":"stdout","output_type":"stream","text":["Anomalies detected using DBSCAN: 65\n","       SYMBOL    TRADE_ID     PRICE   QUANTITY  BUYER_ORDER_ID  \\\n","78    BTCUSDT  3234595848  1.679659  10.884503     22680259779   \n","1176  BTCUSDT  3234596954  1.985024   6.597394     22680270915   \n","1191  BTCUSDT  3234596969  2.001848  11.900645     22680270923   \n","2667  BTCUSDT  3234598445  2.326141   6.469812     22680285809   \n","2739  BTCUSDT  3234598517  2.326141   6.463795     22680285809   \n","\n","      SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  \n","78        22680259707                      0          11              -1  \n","1176      22680270864                      0          11              -1  \n","1191      22680264396                      0          11              -1  \n","2667      22680285616                      0          11              -1  \n","2739      22680286560                      1          11              -1  \n"]}],"source":["import os\n","\n","import logging\n","import matplotlib.pyplot as plt\n","import time\n","from sklearn.neighbors import LocalOutlierFactor\n","\n","from google.colab import drive  # <-- Add this import\n","\n","# Load data\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","print(df.head())  # Print the first few rows of the DataFrame\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[logging.FileHandler(\"error.log\"), logging.StreamHandler()])\n","logger = logging.getLogger(__name__)\n","\n","def read_csv_from_drive(file_path):\n","    \"\"\"Function to read CSV from Google Drive.\"\"\"\n","    try:\n","        return cudf.read_csv(file_path)\n","    except Exception as e:\n","        logger.error(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","def get_signals(df):\n","    \"\"\"Function to detect anomalies, compute technical indicators, and add them to the dataframe.\"\"\"\n","    if 'PRICE' not in df.columns or 'QUANTITY' not in df.columns:\n","        logger.error(\"PRICE or QUANTITY column is missing in the dataframe.\")\n","        return\n","\n","    feature_cols = ['PRICE', 'QUANTITY']\n","\n","    # Normalize the data\n","    try:\n","        start_time = time.time()\n","        scaler = cuml.preprocessing.StandardScaler()\n","        df[feature_cols] = scaler.fit_transform(df[feature_cols])\n","        end_time = time.time()\n","        logger.info(f\"Normalizing data took {end_time - start_time} seconds\")\n","    except Exception as e:\n","        logger.error(f\"Error normalizing data. Exception: {e}\")\n","        return\n","\n","    # Anomaly Detection using DBSCAN\n","    try:\n","        start_time = time.time()\n","        # Anomaly Detection using DBSCAN\n","        dbscan = cuml.DBSCAN(eps=0.5, min_samples=5)\n","        df['DBSCAN_Anomaly'] = dbscan.fit_predict(df[feature_cols])\n","\n","        anomalies_dbscan = df[df['DBSCAN_Anomaly'] == -1]\n","        end_time = time.time()\n","        logger.info(f\"DBSCAN took {end_time - start_time} seconds\")\n","        print(f'Anomalies detected using DBSCAN: {len(anomalies_dbscan)}')\n","        print(anomalies_dbscan.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using DBSCAN. Exception: {e}\")\n","\n","# Anomaly Detection using DBSCAN\n","    try:\n","        start_time = time.time()\n","        # Anomaly Detection using DBSCAN\n","        dbscan = cuml.DBSCAN(eps=0.5, min_samples=5)\n","        df['DBSCAN_Anomaly'] = dbscan.fit_predict(df[feature_cols])\n","\n","        anomalies_dbscan = df[df['DBSCAN_Anomaly'] == -1]\n","        end_time = time.time()\n","        logger.info(f\"DBSCAN took {end_time - start_time} seconds\")\n","        print(f'Anomalies detected using DBSCAN: {len(anomalies_dbscan)}')\n","        print(anomalies_dbscan.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using DBSCAN. Exception: {e}\")\n","\n","    # Technical Indicators using `ta` library\n","    try:\n","        start_time = time.time()\n","        window_size = 100\n","        df['SMA1'] = df['PRICE'].rolling(window=1).mean()\n","        df['SMA100'] = df['PRICE'].rolling(window=window_size).mean()\n","        # Custom GPU RSI Calculation (Simplified)\n","        delta = df['PRICE'].diff().fillna(0)\n","        gain = (delta.where(delta > 0, 0))\n","        loss = (-delta.where(delta < 0, 0))\n","        avg_gain = gain.rolling(window=window_size).mean()\n","        avg_loss = loss.rolling(window=window_size).mean()\n","        rs = avg_gain / avg_loss\n","        df['RSI'] = 100 - (100 / (1 + rs))\n","        # Other technical indicators can also be implemented in a similar GPU-accelerated manner\n","        end_time = time.time()\n","        logger.info(f\"Computing technical indicators took {end_time - start_time} seconds\")\n","    except Exception as e:\n","        logger.error(f\"Error computing technical indicators. Exception: {e}\")\n","\n","     # Save to CSV\n","    try:\n","        path = \"/content/drive/MyDrive/BINANCE/1H/Technical_indicators_simplified_1h.csv\"\n","        df.to_csv(path)\n","        logger.info(f\"Data saved successfully to {path}\")\n","    except Exception as e:\n","        logger.error(f\"Error saving data to {path}. Exception: {e}\")\n","\n","# Assuming Google Drive is already mounted\n","df = read_csv_from_drive('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","\n","# Check if the dataframe is not empty before proceeding\n","if df is not None and not df.empty:\n","    get_signals(df)\n","else:\n","    logger.error(\"DataFrame is empty or None.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xmHzh8NbrvqJ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qZGDTORVrvmx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J9CobtAFrvkF"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KSFwX7TFrvgn"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wwITCLU0rvdq"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rduB2qAurvah"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":18186,"status":"ok","timestamp":1697651713711,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"1PKwXQtzHmEf","outputId":"7205631f-f7dc-4777-b21f-f15107a2f192"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","    SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0  BTCUSDT  3234595905  0.857830  0.000058     22680259990      22680258817   \n","1  BTCUSDT  3234595906  0.857931  0.000040     22680259990      22680258889   \n","2  BTCUSDT  3234595907  0.858432  0.000080     22680259990      22680259285   \n","3  BTCUSDT  3234595908  0.858532  0.000058     22680259990      22680258833   \n","4  BTCUSDT  3234595909  0.858733  0.000053     22680259990      22680258857   \n","\n","   IS_BUYER_MARKET_MAKER  TRADE_HOUR  \n","0                      0          11  \n","1                      0          11  \n","2                      0          11  \n","3                      0          11  \n","4                      0          11  \n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 9 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Anomalies detected using DBSCAN: 65\n","       SYMBOL    TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  \\\n","78    BTCUSDT  3234595848  0.843293  0.196890     22680259779   \n","1176  BTCUSDT  3234596954  0.916082  0.120892     22680270915   \n","1191  BTCUSDT  3234596969  0.920092  0.214904     22680270923   \n","2667  BTCUSDT  3234598445  0.997393  0.118630     22680285809   \n","2739  BTCUSDT  3234598517  0.997393  0.118524     22680285809   \n","\n","      SELLER_ORDER_ID  IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  \n","78        22680259707                      0          11              -1  \n","1176      22680270864                      0          11              -1  \n","1191      22680264396                      0          11              -1  \n","2667      22680285616                      0          11              -1  \n","2739      22680286560                      1          11              -1  \n","Anomalies detected using LOF: 477\n","       SYMBOL    TRADE_ID    PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","3254  BTCUSDT  3234599032  0.85001  0.011663     22680290790      22680289602   \n","3255  BTCUSDT  3234599033  0.85001  0.011663     22680290827      22680289602   \n","3261  BTCUSDT  3234599039  0.85001  0.011663     22680290854      22680289602   \n","3294  BTCUSDT  3234599072  0.85001  0.011513     22680291377      22680289602   \n","3335  BTCUSDT  3234599113  0.85001  0.012047     22680291910      22680289612   \n","\n","      IS_BUYER_MARKET_MAKER  TRADE_HOUR  DBSCAN_Anomaly  LOF_Anomaly  \n","3254                      0          11               0           -1  \n","3255                      0          11               0           -1  \n","3261                      0          11               0           -1  \n","3294                      0          11               0           -1  \n","3335                      0          11               0           -1  \n","   RSI  MACD  MACD_Signal\n","0  NaN   NaN          NaN\n","1  NaN   NaN          NaN\n","2  NaN   NaN          NaN\n","3  NaN   NaN          NaN\n","4  NaN   NaN          NaN\n"]}],"source":["import os\n","import pandas as pd\n","import logging\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import DBSCAN\n","from sklearn.neighbors import LocalOutlierFactor\n","import matplotlib.pyplot as plt\n","import ta\n","import pdb\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        return df\n","    except FileNotFoundError:\n","        print(f\"File {file_path} not found.\")\n","        return None\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","\n","def test_load_and_preprocess_data():\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv'\n","    df = load_and_preprocess_data(file_path)\n","    assert df is not None, f\"Failed to load data from {file_path}\"\n","    # Add more assertions as needed, e.g., on the shape or contents of df\n","\n","test_load_and_preprocess_data()\n","\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","print(df.head())  # Print the first few rows of the DataFrame\n","\n","import matplotlib.pyplot as plt\n","\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","df.hist()\n","plt.show()\n","\n","def load_and_preprocess_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        pdb.set_trace()  # Insert a breakpoint\n","        return df\n","    except FileNotFoundError:\n","        print(f\"File {file_path} not found.\")\n","        return None\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO,\n","                    format='%(asctime)s - %(levelname)s - %(message)s',\n","                    handlers=[\n","                        logging.FileHandler(\"error.log\"),\n","                        logging.StreamHandler()\n","                    ])\n","logger = logging.getLogger(__name__)\n","\n","def read_csv_from_drive(file_path):\n","    \"\"\"Function to read CSV from Google Drive.\"\"\"\n","    try:\n","        return pd.read_csv(file_path)\n","    except Exception as e:\n","        logger.error(f\"Error reading the file {file_path}. Exception: {e}\")\n","        return None\n","\n","def get_signals(df):\n","    \"\"\"Function to detect anomalies, compute technical indicators, and add them to the dataframe.\"\"\"\n","    if 'PRICE' not in df.columns or 'QUANTITY' not in df.columns:\n","        logger.error(\"PRICE or QUANTITY column is missing in the dataframe.\")\n","        return\n","\n","    feature_cols = ['PRICE', 'QUANTITY']\n","\n","    # Normalize the data\n","    try:\n","        scaler = StandardScaler()\n","        data_normalized = scaler.fit_transform(df[feature_cols])\n","    except Exception as e:\n","        logger.error(f\"Error normalizing data. Exception: {e}\")\n","        return\n","\n","    # Anomaly Detection using DBSCAN\n","    try:\n","        dbscan = DBSCAN(eps=0.5, min_samples=5).fit(data_normalized)\n","        df['DBSCAN_Anomaly'] = dbscan.labels_\n","        anomalies_dbscan = df[df['DBSCAN_Anomaly'] == -1]\n","        print(f'Anomalies detected using DBSCAN: {len(anomalies_dbscan)}')\n","        print(anomalies_dbscan.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using DBSCAN. Exception: {e}\")\n","\n","    # Anomaly Detection using LOF\n","    try:\n","        lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)\n","        df['LOF_Anomaly'] = lof.fit_predict(data_normalized)\n","        anomalies_lof = df[df['LOF_Anomaly'] == -1]\n","        print(f'Anomalies detected using LOF: {len(anomalies_lof)}')\n","        print(anomalies_lof.head())\n","    except Exception as e:\n","        logger.error(f\"Error detecting anomalies using LOF. Exception: {e}\")\n","\n","    # Technical Indicators using `ta` library\n","    try:\n","        df['SMA1'] = df['PRICE'].rolling(window=1).mean()\n","        df['SMA100'] = df['PRICE'].rolling(window=100).mean()\n","        df['RSI'] = ta.momentum.RSIIndicator(df['PRICE']).rsi()\n","        macd = ta.trend.MACD(df['PRICE'])\n","        df['MACD'] = macd.macd()\n","        df['MACD_Signal'] = macd.macd_signal()\n","\n","        print(df[['RSI', 'MACD', 'MACD_Signal']].head())\n","    except Exception as e:\n","        logger.error(f\"Error computing technical indicators. Exception: {e}\")\n","\n","    # Save to CSV\n","    try:\n","        path = \"/content/drive/MyDrive/BINANCE/1H/Technical_indicators_simplified_1h.csv\"\n","        df.to_csv(path)\n","        logger.info(f\"Data saved successfully to {path}\")\n","    except Exception as e:\n","        logger.error(f\"Error saving data to {path}. Exception: {e}\")\n","\n","# Assuming Google Drive is already mounted\n","df = read_csv_from_drive('/content/drive/MyDrive/BINANCE/1H/1h_processed_data.csv')\n","\n","# Check if the dataframe is not empty before proceeding\n","if df is not None and not df.empty:\n","    get_signals(df)\n","else:\n","    logger.error(\"DataFrame is empty or None.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":725,"status":"ok","timestamp":1697651884364,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"},"user_tz":-120},"id":"ekfVYhYaHsuZ","outputId":"f8f32c75-493a-453f-9bad-2b9dbe2e1a87"},"outputs":[{"name":"stdout","output_type":"stream","text":["/bin/bash: line 1: nvidia-smi: command not found\n"]}],"source":["!nvidia-smi"]}],"metadata":{"colab":{"provenance":[{"file_id":"1B85xDD5OTNKj6B8urulfkTV9gGzyizMm","timestamp":1697545301502}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}