{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1hrU0sb7Yl6msAbJjbAMsBYSBXopVN7W-","authorship_tag":"ABX9TyMiTFfO7sYfVfo3HCYYQEM7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# class DataProcessor\n","# load_and_preprocess_data"],"metadata":{"id":"ccGPNBAJnI3I"}},{"cell_type":"markdown","source":["Сохранить на Google Диске . Вы можете сохранить файл Python на Google Диске, а затем загружать его оттуда при необходимости.\n","\n","Чтобы сохранить на Google Диск:"],"metadata":{"id":"7s6PJOwmqnxK"}},{"cell_type":"code","source":["%%writefile /content/drive/MyDrive/BINANCE/data_processor.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6SWXR8JvbDq","executionInfo":{"status":"ok","timestamp":1697570651781,"user_tz":-120,"elapsed":19,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"c7cba357-125b-472c-d08d-4255c11ff84f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing /content/drive/MyDrive/BINANCE/data_processor.py\n"]}]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":990},"id":"OL8ZsuE-4s2r","executionInfo":{"status":"ok","timestamp":1698228340365,"user_tz":-120,"elapsed":19092,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"8186781b-6479-407a-de34-5e31f8fb82bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["  EVENT_TYPE         EVENT_TIME    TRADE_ID     PRICE  QUANTITY  \\\n","0      trade  10.10.23 12:39:39  3234644067  27487.67   0.03703   \n","1      trade  10.10.23 12:39:40  3234644068  27487.67   0.00152   \n","2      trade  10.10.23 12:39:41  3234644071  27487.66   0.00800   \n","3      trade  10.10.23 12:39:41  3234644069  27487.67   0.00363   \n","4      trade  10.10.23 12:39:41  3234644070  27487.66   0.00550   \n","\n","   BUYER_ORDER_ID  SELLER_ORDER_ID         TRADE_TIME IS_BUYER_MARKET_MAKER  \n","0     22680782092      22680778995  10.10.23 12:39:39                     N  \n","1     22680782189      22680778995  10.10.23 12:39:40                     N  \n","2     22680781239      22680782237  10.10.23 12:39:41                     Y  \n","3     22680782202      22680778995  10.10.23 12:39:41                     N  \n","4     22680781239      22680782203  10.10.23 12:39:41                     Y  \n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"display_data","data":{"text/plain":["         TRADE_ID     PRICE  QUANTITY  BUYER_ORDER_ID  SELLER_ORDER_ID  \\\n","0      3234644067  0.721423  0.003768     22680782092      22680778995   \n","1      3234644068  0.721423  0.000154     22680782189      22680778995   \n","2      3234644071  0.721337  0.000813     22680781239      22680782237   \n","3      3234644069  0.721423  0.000368     22680782202      22680778995   \n","4      3234644070  0.721337  0.000559     22680781239      22680782203   \n","...           ...       ...       ...             ...              ...   \n","24404  3234668471  0.188388  0.000036     22681050547      22681051873   \n","24405  3234668472  0.187785  0.000033     22681050256      22681051873   \n","24406  3234668473  0.187785  0.000036     22681050413      22681051873   \n","24407  3234668474  0.187268  0.000074     22681049760      22681052069   \n","24408  3234668475  0.187268  0.000232     22681049760      22681052127   \n","\n","               TRADE_TIME  IS_BUYER_MARKET_MAKER  TRADE_YEAR  TRADE_MONTH  \\\n","0     2023-10-10 12:39:39                      0        2023           10   \n","1     2023-10-10 12:39:40                      0        2023           10   \n","2     2023-10-10 12:39:41                      1        2023           10   \n","3     2023-10-10 12:39:41                      0        2023           10   \n","4     2023-10-10 12:39:41                      1        2023           10   \n","...                   ...                    ...         ...          ...   \n","24404 2023-10-10 13:00:00                      1        2023           10   \n","24405 2023-10-10 13:00:00                      1        2023           10   \n","24406 2023-10-10 13:00:00                      1        2023           10   \n","24407 2023-10-10 13:00:00                      1        2023           10   \n","24408 2023-10-10 13:00:00                      1        2023           10   \n","\n","       TRADE_DAY  TRADE_HOUR  TRADE_MINUTE  TRADE_SECOND  \n","0             10          12            39            39  \n","1             10          12            39            40  \n","2             10          12            39            41  \n","3             10          12            39            41  \n","4             10          12            39            41  \n","...          ...         ...           ...           ...  \n","24404         10          13             0             0  \n","24405         10          13             0             0  \n","24406         10          13             0             0  \n","24407         10          13             0             0  \n","24408         10          13             0             0  \n","\n","[24409 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-19449004-713a-44fe-ab5a-8e10e16f16d2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TRADE_ID</th>\n","      <th>PRICE</th>\n","      <th>QUANTITY</th>\n","      <th>BUYER_ORDER_ID</th>\n","      <th>SELLER_ORDER_ID</th>\n","      <th>TRADE_TIME</th>\n","      <th>IS_BUYER_MARKET_MAKER</th>\n","      <th>TRADE_YEAR</th>\n","      <th>TRADE_MONTH</th>\n","      <th>TRADE_DAY</th>\n","      <th>TRADE_HOUR</th>\n","      <th>TRADE_MINUTE</th>\n","      <th>TRADE_SECOND</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3234644067</td>\n","      <td>0.721423</td>\n","      <td>0.003768</td>\n","      <td>22680782092</td>\n","      <td>22680778995</td>\n","      <td>2023-10-10 12:39:39</td>\n","      <td>0</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>39</td>\n","      <td>39</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3234644068</td>\n","      <td>0.721423</td>\n","      <td>0.000154</td>\n","      <td>22680782189</td>\n","      <td>22680778995</td>\n","      <td>2023-10-10 12:39:40</td>\n","      <td>0</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>39</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3234644071</td>\n","      <td>0.721337</td>\n","      <td>0.000813</td>\n","      <td>22680781239</td>\n","      <td>22680782237</td>\n","      <td>2023-10-10 12:39:41</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>39</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3234644069</td>\n","      <td>0.721423</td>\n","      <td>0.000368</td>\n","      <td>22680782202</td>\n","      <td>22680778995</td>\n","      <td>2023-10-10 12:39:41</td>\n","      <td>0</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>39</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3234644070</td>\n","      <td>0.721337</td>\n","      <td>0.000559</td>\n","      <td>22680781239</td>\n","      <td>22680782203</td>\n","      <td>2023-10-10 12:39:41</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>39</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>24404</th>\n","      <td>3234668471</td>\n","      <td>0.188388</td>\n","      <td>0.000036</td>\n","      <td>22681050547</td>\n","      <td>22681051873</td>\n","      <td>2023-10-10 13:00:00</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24405</th>\n","      <td>3234668472</td>\n","      <td>0.187785</td>\n","      <td>0.000033</td>\n","      <td>22681050256</td>\n","      <td>22681051873</td>\n","      <td>2023-10-10 13:00:00</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24406</th>\n","      <td>3234668473</td>\n","      <td>0.187785</td>\n","      <td>0.000036</td>\n","      <td>22681050413</td>\n","      <td>22681051873</td>\n","      <td>2023-10-10 13:00:00</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24407</th>\n","      <td>3234668474</td>\n","      <td>0.187268</td>\n","      <td>0.000074</td>\n","      <td>22681049760</td>\n","      <td>22681052069</td>\n","      <td>2023-10-10 13:00:00</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24408</th>\n","      <td>3234668475</td>\n","      <td>0.187268</td>\n","      <td>0.000232</td>\n","      <td>22681049760</td>\n","      <td>22681052127</td>\n","      <td>2023-10-10 13:00:00</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>24409 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19449004-713a-44fe-ab5a-8e10e16f16d2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-19449004-713a-44fe-ab5a-8e10e16f16d2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-19449004-713a-44fe-ab5a-8e10e16f16d2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b6eb80c7-0e3a-4216-82db-0ae1a91431af\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b6eb80c7-0e3a-4216-82db-0ae1a91431af')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b6eb80c7-0e3a-4216-82db-0ae1a91431af button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["      PRICE  QUANTITY\n","0  27487.67   0.03703\n","1  27487.67   0.00152\n","2  27487.66   0.00800\n","3  27487.67   0.00363\n","4  27487.66   0.00550\n"]}],"source":["# 24409_preprocess_data_1\n","\n","from sklearn import preprocessing\n","import pandas as pd\n","import logging\n","import matplotlib.pyplot as plt\n","import pickle\n","from sklearn.preprocessing import MinMaxScaler\n","import os\n","\n","from google.colab import drive\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO)\n","logger = logging.getLogger(__name__)\n","\n","def load_and_preprocess_data(file_path):\n","    try:\n","        if file_path.endswith('.csv'):\n","            df = pd.read_csv(file_path)\n","            # Drop 'SYMBOL' column\n","            df.drop(columns=['SYMBOL'], errors='ignore', inplace=True)\n","        else:\n","            logger.error(f\"Unsupported file format: {file_path}\")\n","            return None\n","        return df\n","    except FileNotFoundError:\n","        logger.error(f\"File {file_path} not found.\")\n","        return None\n","\n","def test_load_and_preprocess_data_v1():\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/trade_24409_10_10_23.csv'\n","    df = load_and_preprocess_data(file_path)\n","    assert df is not None, f\"Failed to load data from {file_path}\"\n","\n","def test_load_and_preprocess_data_v2():\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/trade_24409_10_10_23.csv'\n","    df = load_and_preprocess_data(file_path)\n","    assert df is not None, f\"Failed to load data from {file_path}\"\n","\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/trade_24409_10_10_23.csv')\n","print(df.head())  # Print the first few rows of the DataFrame\n","\n","import matplotlib.pyplot as plt\n","import pdb\n","df = load_and_preprocess_data('/content/drive/MyDrive/BINANCE/1H/trade_24409_10_10_23.csv')\n","#df.hist()\n","plt.show()\n","\n","# Function to load and preprocess data\n","def load_and_preprocess_data(file_path):\n","    try:\n","        if file_path.endswith('.csv'):\n","            df = pd.read_csv(file_path)\n","        else:\n","            logger.error(f\"Unsupported file format: {file_path}\")\n","            return None\n","        return df\n","    except FileNotFoundError:\n","        logger.error(f\"File {file_path} not found.\")\n","        return None\n","\n","class DataProcessor:\n","    def __init__(self, file_path: str, scaler_path: str):\n","        self.file_path = file_path\n","        self.scaler_path = scaler_path\n","        self.df = None\n","        self.logger = self.configure_logging()\n","\n","    @staticmethod\n","    def configure_logging():\n","        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n","        return logging.getLogger(__name__)\n","\n","    def read_data(self):\n","        \"\"\"Reads the data from the file path.\"\"\"\n","        if not os.path.exists(self.file_path):\n","            self.logger.error(f\"File {self.file_path} not found.\")\n","            return\n","\n","        try:\n","            self.df = pd.read_csv(self.file_path)\n","            if 'EVENT_TYPE' in self.df.columns:\n","                self.df.drop(columns=['EVENT_TYPE'], inplace=True)\n","            if 'SYMBOL' in self.df.columns:\n","                self.df.drop(columns=['SYMBOL'], inplace=True)\n","            self.logger.info(f'Successfully read data from {self.file_path}')\n","        except Exception as e:\n","            self.logger.error(f\"Unexpected error while reading data from {self.file_path}: {e}\", exc_info=True)\n","\n","    @staticmethod\n","    def handle_missing_values(df):\n","        \"\"\"Handles missing values in the dataframe.\"\"\"\n","        df.ffill(inplace=True)\n","        return df\n","\n","    @staticmethod\n","    def convert_to_datetime(df, columns):\n","        \"\"\"Converts specified columns to datetime.\"\"\"\n","        for col in columns:\n","            df[col] = pd.to_datetime(df[col])\n","        return df\n","\n","    @staticmethod\n","    def scale_columns(df, columns):\n","        \"\"\"Scales specified columns using MinMaxScaler.\"\"\"\n","        scaler = MinMaxScaler()\n","        df[columns] = scaler.fit_transform(df[columns])\n","        return df, scaler\n","\n","    def preprocess(self, scale_data=False):\n","        \"\"\"Preprocesses the dataframe.\"\"\"\n","        if self.df is None:\n","            self.logger.error(\"Dataframe is None in preprocess method.\")\n","            return None, None\n","\n","        if 'TRADE_TIME' not in self.df.columns:\n","            self.logger.error(\"'TRADE_TIME' column not found in the dataframe.\")\n","            return None, None\n","\n","        # Convert TRADE_TIME column to datetime format\n","        self.df['TRADE_TIME'] = pd.to_datetime(self.df['TRADE_TIME'], format='%d.%m.%y %H:%M:%S')\n","\n","        # Extract datetime components\n","        self.df['TRADE_YEAR'] = self.df['TRADE_TIME'].dt.year\n","        self.df['TRADE_MONTH'] = self.df['TRADE_TIME'].dt.month\n","        self.df['TRADE_DAY'] = self.df['TRADE_TIME'].dt.day\n","        self.df['TRADE_HOUR'] = self.df['TRADE_TIME'].dt.hour\n","        self.df['TRADE_MINUTE'] = self.df['TRADE_TIME'].dt.minute\n","        self.df['TRADE_SECOND'] = self.df['TRADE_TIME'].dt.second\n","\n","        # Continue with other preprocessing steps\n","        self.df = self.handle_missing_values(self.df)\n","        self.df['IS_BUYER_MARKET_MAKER'] = self.df['IS_BUYER_MARKET_MAKER'].map({'Y': 1, 'N': 0}, na_action='ignore')\n","\n","        # Conditionally scale the PRICE and QUANTITY columns\n","        if scale_data:\n","            self.df, scaler = self.scale_columns(self.df, [\"PRICE\", \"QUANTITY\"])\n","        else:\n","            scaler = None\n","\n","        # Drop 'EVENT_TIME' column\n","        self.df.drop(columns=[\"EVENT_TIME\"], errors='ignore', inplace=True)\n","\n","        return scaler\n","\n","\n","    def save_scaler(self, scaler):\n","        \"\"\"Saves the scaler object to a file.\"\"\"\n","        directory = os.path.dirname(self.scaler_path)\n","        if not os.path.exists(directory):\n","            os.makedirs(directory)\n","\n","        try:\n","            with open(self.scaler_path, 'wb') as f:\n","                pickle.dump(scaler, f)\n","            self.logger.info(f\"Scaler saved to {self.scaler_path}\")\n","        except Exception as e:\n","            self.logger.error(f\"Error saving scaler: {e}\", exc_info=True)\n","\n","    def process(self):\n","        \"\"\"Main processing method.\"\"\"\n","        self.read_data()\n","        scaler = self.preprocess(scale_data=True)\n","\n","        if scaler:\n","            self.save_scaler(scaler)\n","        self.show_dataframe()\n","        self.save_dataframe()  # Add this line to save the DataFrame\n","        return self.df\n","\n","    def show_dataframe(self):\n","        \"\"\"Displays the dataframe.\"\"\"\n","        if self.df is not None:\n","            display(self.df)\n","        else:\n","            self.logger.error(\"Dataframe is not available or hasn't been processed yet.\")\n","    def save_dataframe(self):\n","        try:\n","            self.df.to_csv(\"/content/drive/MyDrive/BINANCE/1H/24409_processed_data.csv\", index=False)\n","            self.logger.info(f\"Dataframe saved to /content/drive/MyDrive/BINANCE/1H/24409_processed_data.csv\")\n","        except Exception as e:\n","            self.logger.error(f\"Error saving dataframe: {e}\", exc_info=True)\n","\n","\n","# Main execution\n","if __name__ == '__main__':\n","    # Mount Google Drive\n","    drive.mount('/content/drive')\n","\n","    file_path = '/content/drive/MyDrive/BINANCE/1H/trade_24409_10_10_23.csv'\n","    scaler_path = '/content/drive/MyDrive/BINANCE/1H/scaler_24409.pkl'\n","\n","    processor = DataProcessor(file_path, scaler_path)\n","    processed_df = processor.process()\n","\n","    # Load the saved scaler\n","    with open(scaler_path, 'rb') as f:\n","        loaded_scaler = pickle.load(f)\n","\n","    # Assume df_scaled is the DataFrame with scaled 'PRICE' and 'QUANTITY' values\n","    scaled_values = processed_df[[\"PRICE\", \"QUANTITY\"]].values\n","\n","    # Get the original values\n","    original_values = loaded_scaler.inverse_transform(scaled_values)\n","\n","    # Create a DataFrame from the original values\n","    df_original = pd.DataFrame(original_values, columns=[\"PRICE\", \"QUANTITY\"])\n","\n","    # Now df_original contains the original 'PRICE' and 'QUANTITY' values\n","    print(df_original.head())\n","\n","\n"]},{"cell_type":"code","source":["import os\n","\n","file_path = '/content/drive/MyDrive/BINANCE/1H/24409_processed_data.csv'\n","if os.path.exists(file_path):\n","    print(f\"File {file_path} exists.\")\n","else:\n","    print(f\"File {file_path} does not exist.\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ca1pUV_5jIon","executionInfo":{"status":"ok","timestamp":1698228473206,"user_tz":-120,"elapsed":387,"user":{"displayName":"Кондратов Олег","userId":"05121404142611870598"}},"outputId":"7ccfc085-35ae-4b73-dc44-6234ab1bb419"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["File /content/drive/MyDrive/BINANCE/1H/24409_processed_data.csv exists.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"8o1tmr-IjIcl"},"execution_count":null,"outputs":[]}]}